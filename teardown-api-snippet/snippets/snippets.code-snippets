{
	"init": {
		"scope": "lua",
		"body": [
			"function init()",
			"\t$0",
			"end"
		],
		"prefix": "init",
		"description": "Called once at load time"
	},
	"tick": {
		"scope": "lua",
		"body": [
			"function tick(dt)",
			"\t$0",
			"end"
		],
		"prefix": "tick",
		"description": "Called exactly once per frame. The time step is variable but always between 0.0 and 0.0333333"
	},
	"update": {
		"scope": "lua",
		"body": [
			"function update(dt)",
			"\t$0",
			"end"
		],
		"prefix": "update",
		"description": "Called at a fixed update rate, but at the most two times per frame. Time step is always 0.0166667 (60 updates per second). Depending on frame rate it might not be called at all for a particular frame."
	},
	"draw": {
		"scope": "lua",
		"body": [
			"function draw()",
			"\t$0",
			"end"
		],
		"prefix": "draw",
		"description": "Called when the 2D overlay is being draw, after the scene but before the standard HUD. Ui functions can only be used from this callback."
	},

    "GetIntParam": {
        "scope": "lua",
        "body": "GetIntParam('${name}',${default})",
        "prefix": "GetIntParam",
        "description": "Arguments\nname (string) – Parameter name\ndefault (number) – Default parameter value\n\n\nReturn value\nvalue (number) – Parameter value\n\n\nFunction Information\nnone\n\nExample\n--Retrieve blinkcount parameter, or set to 5 if omitted\nparameterBlinkCount = GetIntParameter(\"blinkcount\", 5)\n\nAPI 0.7.0"
    },
    "GetFloatParam": {
        "scope": "lua",
        "body": "GetFloatParam('${name}',${default})",
        "prefix": "GetFloatParam",
        "description": "Arguments\nname (string) – Parameter name\ndefault (number) – Default parameter value\n\n\nReturn value\nvalue (number) – Parameter value\n\n\nFunction Information\nnone\n\nExample\n--Retrieve speed parameter, or set to 10.0 if omitted\nparameterSpeed = GetFloatParameter(\"speed\", 10.0)\n\nAPI 0.7.0"
    },
    "GetBoolParam": {
        "scope": "lua",
        "body": "GetBoolParam('${name}',${default})",
        "prefix": "GetBoolParam",
        "description": "Arguments\nname (string) – Parameter name\ndefault (boolean) – Default parameter value\n\n\nReturn value\nvalue (boolean) – Parameter value\n\n\nFunction Information\nnone\n\nExample\n--Retrieve playsound parameter, or false if omitted\nparameterPlaySound = GetBoolParameter(\"playsound\", false)\n\nAPI 0.7.0"
    },
    "GetStringParam": {
        "scope": "lua",
        "body": "GetStringParam('${name}','${default}')",
        "prefix": "GetStringParam",
        "description": "Arguments\nname (string) – Parameter name\ndefault (string) – Default parameter value\n\n\nReturn value\nvalue (string) – Parameter value\n\n\nFunction Information\nnone\n\nExample\n--Retrieve mode parameter, or \"idle\" if omitted\nparameterMode = GetSrtingParameter(\"mode\", \"idle\")\n\nAPI 0.7.0"
    },
    "GetVersion": {
        "scope": "lua",
        "body": "GetVersion()",
        "prefix": "GetVersion",
        "description": "Arguments\nnone\n\nReturn value\nversion (string) – Dot separated string of current version of the game\n\n\nFunction Information\nnone\n\nExample\nlocal v = GetVersion()\n--v is \"0.5.0\"\n\nAPI 0.7.0"
    },
    "HasVersion": {
        "scope": "lua",
        "body": "HasVersion('${version}')",
        "prefix": "HasVersion",
        "description": "Arguments\nversion (string) – Reference version\n\n\nReturn value\nmatch (boolean) – True if current version is at least provided one\n\n\nFunction Information\nnone\n\nExample\nif HasVersion(\"0.6.0\") then\n\t--conditional code that only works on 0.6.0 or above\nelse\n\t--legacy code that works on earlier versions\nend\n\nAPI 0.7.0"
    },
    "GetTime": {
        "scope": "lua",
        "body": "GetTime()",
        "prefix": "GetTime",
        "description": "Arguments\nnone\n\nReturn value\ntime (number) – The time in seconds since level was started\n\n\nFunction Information\nReturns running time of this script. If called from update, this returns the simulated time, otherwise it returns wall time.\n\nExample\nlocal t = GetTime()\n\nAPI 0.7.0"
    },
    "GetTimeStep": {
        "scope": "lua",
        "body": "GetTimeStep()",
        "prefix": "GetTimeStep",
        "description": "Arguments\nnone\n\nReturn value\ndt (number) – The timestep in seconds\n\n\nFunction Information\nReturns timestep of the last frame. If called from update, this returns the simulation time step, which is always one 60th of a second (0.0166667). If called from tick or draw it returns the actual time since last frame.\n\nExample\nlocal dt = GetTimeStep()\n\nAPI 0.7.0"
    },
    "InputPressed": {
        "scope": "lua",
        "body": "InputPressed('${input}')",
        "prefix": "InputPressed",
        "description": "Arguments\ninput (string) – The input identifier\n\n\nReturn value\npressed (boolean) – True if input was pressed during last frame\n\n\nFunction Information\nnone\n\nExample\nif InputPressed(\"interact\") then\n\t...\nend\n\nAPI 0.7.0"
    },
    "InputReleased": {
        "scope": "lua",
        "body": "InputReleased('${input}')",
        "prefix": "InputReleased",
        "description": "Arguments\ninput (string) – The input identifier\n\n\nReturn value\npressed (boolean) – True if input was released during last frame\n\n\nFunction Information\nnone\n\nExample\nif InputReleased(\"interact\") then\n\t...\nend\n\nAPI 0.7.0"
    },
    "InputDown": {
        "scope": "lua",
        "body": "InputDown('${input}')",
        "prefix": "InputDown",
        "description": "Arguments\ninput (string) – The input identifier\n\n\nReturn value\npressed (boolean) – True if input is currently held down\n\n\nFunction Information\nnone\n\nExample\nif InputDown(\"interact\") then\n...\nend\n\nAPI 0.7.0"
    },
    "InputValue": {
        "scope": "lua",
        "body": "InputValue('${input}')",
        "prefix": "InputValue",
        "description": "Arguments\ninput (string) – The input identifier\n\n\nReturn value\nvalue (number) – Depends on input type\n\n\nFunction Information\nnone\n\nExample\nscrollPos = scrollPos + InputValue(\"mousewheel\")\n\nAPI 0.7.0"
    },
    "SetValue": {
        "scope": "lua",
        "body": "SetValue('${variable}',${value},transition,time,time)",
        "prefix": "SetValue",
        "description": "Arguments\nvariable (string) – Name of number variable in the global context\nvalue (number) – The new value\ntransition (string, optional) – Transition type. See description.\ntime (number, optional) – Transition time (seconds)\n\n\nReturn value\nnone\n\nFunction Information\nSet value of a number variable in the global context with an optional transition. If a transition is provided the value will animate from current value to the new value during the transition time. Transition can be one of the following:\n\nExample\nmyValue = 0\nSetValue(\"myValue\", 1, \"linear\", 0.5)\n\nThis will change the value of myValue from 0 to 1 in a linear fasion over 0.5 seconds\n\nAPI 0.7.0"
    },
    "StartLevel": {
        "scope": "lua",
        "body": "StartLevel('${mission}','${path}',layers)",
        "prefix": "StartLevel",
        "description": "Arguments\nmission (string) – An identifier of your choice\npath (string) – Path to level XML file\nlayers (string, optional) – Active layers. Default is no layers.\n\n\nReturn value\nnone\n\nFunction Information\nStart a level\n\nExample\n--Start level with no active layers\nStartLevel(\"level1\", \"MOD/level1.xml\")\n\n--Start level with two layers\nStartLevel(\"level1\", \"MOD/level1.xml\", \"vehicles targets\")\n\nAPI 0.7.0"
    },
    "SetPaused": {
        "scope": "lua",
        "body": "SetPaused(${paused})",
        "prefix": "SetPaused",
        "description": "Arguments\npaused (boolean) – True if game should be paused\n\n\nReturn value\nnone\n\nFunction Information\nSet paused state of the game\n\nExample\n--Pause game and bring up pause menu on HUD\nSetPaused(true)\n\nAPI 0.7.0"
    },
    "Restart": {
        "scope": "lua",
        "body": "Restart()",
        "prefix": "Restart",
        "description": "Arguments\nnone\n\nReturn value\nnone\n\nFunction Information\nRestart level\n\nExample\nif shouldRestart then\nRestart()\nend\n\nAPI 0.7.0"
    },
    "Menu": {
        "scope": "lua",
        "body": "Menu()",
        "prefix": "Menu",
        "description": "Arguments\nnone\n\nReturn value\nnone\n\nFunction Information\nGo to main menu\n\nExample\nif shouldExitLevel then\nMenu()\nend\n\nAPI 0.7.0"
    },
    "ClearKey": {
        "scope": "lua",
        "body": "ClearKey('${key}')",
        "prefix": "ClearKey",
        "description": "Arguments\nkey (string) – Registry key to clear\n\n\nReturn value\nnone\n\nFunction Information\nRemove registry node, including all child nodes.\n\nExample\n--If the registry looks like this:\n--\tscore\n--\t\tlevels\n--\t\t\tlevel1 = 5\n--\t\t\tlevel2 = 4\n\nClearKey(\"score.levels\")\n\n--Afterwards, the registry will look like this:\n--\tscore\n\nAPI 0.7.0"
    },
    "ListKeys": {
        "scope": "lua",
        "body": "ListKeys('${parent}')",
        "prefix": "ListKeys",
        "description": "Arguments\nparent (string) – The parent registry key\n\n\nReturn value\nchildren (table) – Indexed table of strings with child keys\n\n\nFunction Information\nList all child keys of a registry node.\n\nExample\n--If the registry looks like this:\n--\tscore\n--\t\tlevels\n--\t\t\tlevel1 = 5\n--\t\t\tlevel2 = 4\n\nlocal list = ListKeys(\"score.levels\")\nfor i=1, #list do\n\tprint(list[i])\nend\n\n--This will output:\n--level1\n--level2\n\nAPI 0.7.0"
    },
    "HasKey": {
        "scope": "lua",
        "body": "HasKey('${key}')",
        "prefix": "HasKey",
        "description": "Arguments\nkey (string) – Registry key\n\n\nReturn value\nexists (boolean) – True if key exists\n\n\nFunction Information\nReturns true if the registry contains a certain key\n\nExample\nlocal foo = HasKey(\"score.levels\")\n\nAPI 0.7.0"
    },
    "SetInt": {
        "scope": "lua",
        "body": "SetInt('${key}',${value})",
        "prefix": "SetInt",
        "description": "Arguments\nkey (string) – Registry key\nvalue (number) – Desired value\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nSetInt(\"score.levels.level1\", 4)\n\nAPI 0.7.0"
    },
    "GetInt": {
        "scope": "lua",
        "body": "GetInt('${key}')",
        "prefix": "GetInt",
        "description": "Arguments\nkey (string) – Registry key\n\n\nReturn value\nvalue (number) – Integer value of registry node or zero if not found\n\n\nFunction Information\nnone\n\nExample\nlocal a = GetInt(\"score.levels.level1\")\n\nAPI 0.7.0"
    },
    "SetFloat": {
        "scope": "lua",
        "body": "SetFloat('${key}',${value})",
        "prefix": "SetFloat",
        "description": "Arguments\nkey (string) – Registry key\nvalue (number) – Desired value\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nSetFloat(\"level.time\", 22.3)\n\nAPI 0.7.0"
    },
    "GetFloat": {
        "scope": "lua",
        "body": "GetFloat('${key}')",
        "prefix": "GetFloat",
        "description": "Arguments\nkey (string) – Registry key\n\n\nReturn value\nvalue (number) – Float value of registry node or zero if not found\n\n\nFunction Information\nnone\n\nExample\nlocal time = GetFloat(\"level.time\")\n\nAPI 0.7.0"
    },
    "SetBool": {
        "scope": "lua",
        "body": "SetBool('${key}',${value})",
        "prefix": "SetBool",
        "description": "Arguments\nkey (string) – Registry key\nvalue (boolean) – Desired value\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nSetBool(\"level.robots.enabled\", true)\n\nAPI 0.7.0"
    },
    "GetBool": {
        "scope": "lua",
        "body": "GetBool('${key}')",
        "prefix": "GetBool",
        "description": "Arguments\nkey (string) – Registry key\n\n\nReturn value\nvalue (boolean) – Boolean value of registry node or false if not found\n\n\nFunction Information\nnone\n\nExample\nlocal isRobotsEnabled = GetBool(\"level.robots.enabled\")\n\nAPI 0.7.0"
    },
    "SetString": {
        "scope": "lua",
        "body": "SetString('${key}','${value}')",
        "prefix": "SetString",
        "description": "Arguments\nkey (string) – Registry key\nvalue (string) – Desired value\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nSetString(\"level.name\", \"foo\")\n\nAPI 0.7.0"
    },
    "GetString": {
        "scope": "lua",
        "body": "GetString('${key}')",
        "prefix": "GetString",
        "description": "Arguments\nkey (string) – Registry key\n\n\nReturn value\nvalue (string) – String value of registry node or \"\" if not found\n\n\nFunction Information\nnone\n\nExample\nlocal name = GetString(\"level.name\")\n\nAPI 0.7.0"
    },
    "Vec": {
        "scope": "lua",
        "body": "Vec(x,y,z)",
        "prefix": "Vec",
        "description": "Arguments\nx (number, optional) – X value\ny (number, optional) – Y value\nz (number, optional) – Z value\n\n\nReturn value\nvec (table) – New vector\n\n\nFunction Information\nCreate new vector and optionally initializes it to the provided values. A Vec is equivalent to a regular lua table with three numbers.\n\nExample\n--These are equivalent\nlocal a1 = Vec()\nlocal a2 = {0, 0, 0}\n\n--These are equivalent\nlocal b1 = Vec(0, 1, 0)\nlocal b2 = {0, 1, 0}\n\nAPI 0.7.0"
    },
    "VecCopy": {
        "scope": "lua",
        "body": "VecCopy((${org}))",
        "prefix": "VecCopy",
        "description": "Arguments\norg (table) – A vector\n\n\nReturn value\nnew (table) – Copy of org vector\n\n\nFunction Information\nVectors should never be assigned like regular numbers. Since they are implemented with lua tables assignment means two references pointing to the same data. Use this function instead.\n\nExample\n--Do this to assign a vector\nlocal right1 = Vec(1, 2, 3)\nlocal right2 = VecCopy(right1)\n\n--Never do this unless you REALLY know what you're doing\nlocal wrong1 = Vec(1, 2, 3)\nlocal wrong2 = wrong1\n\nAPI 0.7.0"
    },
    "VecLength": {
        "scope": "lua",
        "body": "VecLength((${vec}))",
        "prefix": "VecLength",
        "description": "Arguments\nvec (table) – A vector\n\n\nReturn value\nlength (number) – Length (magnitude) of the vector\n\n\nFunction Information\nnone\n\nExample\nlocal v = Vec(1,1,0)\nlocal l = VecLength(v)\n\n--l now equals 1.41421356\n\nAPI 0.7.0"
    },
    "VecNormalize": {
        "scope": "lua",
        "body": "VecNormalize((${vec}))",
        "prefix": "VecNormalize",
        "description": "Arguments\nvec (table) – A vector\n\n\nReturn value\nnorm (table) – A vector of length 1.0\n\n\nFunction Information\nIf the input vector is of zero length, the function returns {0,0,1}\n\nExample\nlocal v = Vec(0,3,0)\nlocal n = VecNormalize(v)\n\n--n now equals {0,1,0}\n\nAPI 0.7.0"
    },
    "VecScale": {
        "scope": "lua",
        "body": "VecScale((${vec}),${scale})",
        "prefix": "VecScale",
        "description": "Arguments\nvec (table) – A vector\nscale (number) – A scale factor\n\n\nReturn value\nnorm (table) – A scaled version of input vector\n\n\nFunction Information\nnone\n\nExample\nlocal v = Vec(1,2,3)\nlocal n = VecScale(v, 2)\n\n--n now equals {2,4,6}\n\nAPI 0.7.0"
    },
    "VecAdd": {
        "scope": "lua",
        "body": "VecAdd((${a}),(${b}))",
        "prefix": "VecAdd",
        "description": "Arguments\na (table) – Vector\nb (table) – Vector\n\n\nReturn value\nc (table) – New vector with sum of a and b\n\n\nFunction Information\nnone\n\nExample\nlocal a = Vec(1,2,3)\nlocal b = Vec(3,0,0)\nlocal c = VecAdd(a, b)\n\n--c now equals {4,2,3}\n\nAPI 0.7.0"
    },
    "VecSub": {
        "scope": "lua",
        "body": "VecSub((${a}),(${b}))",
        "prefix": "VecSub",
        "description": "Arguments\na (table) – Vector\nb (table) – Vector\n\n\nReturn value\nc (table) – New vector representing a-b\n\n\nFunction Information\nnone\n\nExample\nlocal a = Vec(1,2,3)\nlocal b = Vec(3,0,0)\nlocal c = VecSub(a, b)\n\n--c now equals {-2,2,3}\n\nAPI 0.7.0"
    },
    "VecDot": {
        "scope": "lua",
        "body": "VecDot((${a}),(${b}))",
        "prefix": "VecDot",
        "description": "Arguments\na (table) – Vector\nb (table) – Vector\n\n\nReturn value\nc (number) – Dot product of a and b\n\n\nFunction Information\nnone\n\nExample\nlocal a = Vec(1,2,3)\nlocal b = Vec(3,1,0)\nlocal c = VecDot(a, b)\n\n--c now equals 5\n\nAPI 0.7.0"
    },
    "VecCross": {
        "scope": "lua",
        "body": "VecCross((${a}),(${b}))",
        "prefix": "VecCross",
        "description": "Arguments\na (table) – Vector\nb (table) – Vector\n\n\nReturn value\nc (table) – Cross product of a and b (also called vector product)\n\n\nFunction Information\nnone\n\nExample\nlocal a = Vec(1,0,0)\nlocal b = Vec(0,1,0)\nlocal c = VecCross(a, b)\n\n--c now equals {0,0,1}\n\nAPI 0.7.0"
    },
    "VecLerp": {
        "scope": "lua",
        "body": "VecLerp((${a}),(${b}),${t},fraction)",
        "prefix": "VecLerp",
        "description": "Arguments\na (table) – Vector\nb (table) – Vector\nt (number) – fraction (usually between 0.0 and 1.0)\n\n\nReturn value\nc (table) – Linearly interpolated vector between a and b, using t\n\n\nFunction Information\nnone\n\nExample\nlocal a = Vec(2,0,0)\nlocal b = Vec(0,4,2)\nlocal t = 0.5\n\n--These two are equivalent\nlocal c1 = VecLerp(a, b, t)\nlcoal c2 = VecAdd(VecScale(a, 1-t), VecScale(b, t))\n\n--c1 and c2 now equals {1, 2, 1}\n\nAPI 0.7.0"
    },
    "Quat": {
        "scope": "lua",
        "body": "Quat(x,y,z,w)",
        "prefix": "Quat",
        "description": "Arguments\nx (number, optional) – X value\ny (number, optional) – Y value\nz (number, optional) – Z value\nw (number, optional) – W value\n\n\nReturn value\nquat (table) – New quaternion\n\n\nFunction Information\nCreate new quaternion and optionally initializes it to the provided values. Do not attempt to initialize a quaternion with raw values unless you know what you are doing. Use QuatEuler or QuatAxisAngle instead. If no arguments are given, a unit quaternion will be created: {0, 0, 0, 1}. A quaternion is equivalent to a regular lua table with four numbers.\n\nExample\n--These are equivalent\nlocal a1 = Quat()\nlocal a2 = {0, 0, 0, 1}\n\nAPI 0.7.0"
    },
    "QuatCopy": {
        "scope": "lua",
        "body": "QuatCopy((${org}))",
        "prefix": "QuatCopy",
        "description": "Arguments\norg (table) – Quaternion\n\n\nReturn value\nnew (table) – Copy of org quaternion\n\n\nFunction Information\nQuaternions should never be assigned like regular numbers. Since they are implemented with lua tables assignment means two references pointing to the same data. Use this function instead.\n\nExample\n--Do this to assign a quaternion\nlocal right1 = QuatEuler(0, 90, 0)\nlocal right2 = QuatCopy(right1)\n\n--Never do this unless you REALLY know what you're doing\nlocal wrong1 = QuatEuler(0, 90, 0)\nlocal wrong2 = wrong1\n\nAPI 0.7.0"
    },
    "QuatAxisAngle": {
        "scope": "lua",
        "body": "QuatAxisAngle((${axis}),${angle})",
        "prefix": "QuatAxisAngle",
        "description": "Arguments\naxis (table) – Rotation axis, unit vector\nangle (number) – Rotation angle in degrees\n\n\nReturn value\nquat (table) – New quaternion\n\n\nFunction Information\nCreate a quaternion representing a rotation around a specific axis\n\nExample\n--Create quaternion representing rotation 30 degrees around Y axis\nlocal q = QuatAxisAngle(Vec(0,1,0), 30)\n\nAPI 0.7.0"
    },
    "QuatEuler": {
        "scope": "lua",
        "body": "QuatEuler(${x},${y},${z})",
        "prefix": "QuatEuler",
        "description": "Arguments\nx (number) – Angle around X axis in degrees, sometimes also called roll or bank\ny (number) – Angle around Y axis in degrees, sometimes also called yaw or heading\nz (number) – Angle around Z axis in degrees, sometimes also called pitch or attitude\n\n\nReturn value\nquat (table) – New quaternion\n\n\nFunction Information\nCreate quaternion using euler angle notation. The order of applied rotations uses the \"NASA standard aeroplane\" model:\n\nExample\n--Create quaternion representing rotation 30 degrees around Y axis and 25 degrees around Z axis\nlocal q = QuatEuler(0, 30, 25)\n\nAPI 0.7.0"
    },
    "QuatLookAt": {
        "scope": "lua",
        "body": "QuatLookAt((${eye}),(${target}))",
        "prefix": "QuatLookAt",
        "description": "Arguments\neye (table) – Vector representing the camera location\ntarget (table) – Vector representing the point to look at\n\n\nReturn value\nquat (table) – New quaternion\n\n\nFunction Information\nCreate a quaternion pointing the negative Z axis (forward) towards a specific point, keeping the Y axis upwards. This is very useful for creating camera transforms.\n\nExample\nlocal eye = Vec(0, 10, 0)\nlocal target = Vec(0, 1, 5)\nlocal rot = QuatLookAt(eye, target)\nSetCameraTransform(Transform(eye, rot))\n\nAPI 0.7.0"
    },
    "QuatSlerp": {
        "scope": "lua",
        "body": "QuatSlerp((${a}),(${b}),${t},fraction)",
        "prefix": "QuatSlerp",
        "description": "Arguments\na (table) – Quaternion\nb (table) – Quaternion\nt (number) – fraction (usually between 0.0 and 1.0)\n\n\nReturn value\nc (table) – New quaternion\n\n\nFunction Information\nSpherical, linear interpolation between a and b, using t. This is very useful for animating between two rotations.\n\nExample\nlocal a = QuatEuler(0, 10, 0)\nlocal b = QuatEuler(0, 0, 45)\n\n--Create quaternion half way between a and b\nlocal q = QuatSlerp(a, b, 0.5)\n\nAPI 0.7.0"
    },
    "QuatRotateQuat": {
        "scope": "lua",
        "body": "QuatRotateQuat((${a}),(${b}))",
        "prefix": "QuatRotateQuat",
        "description": "Arguments\na (table) – Quaternion\nb (table) – Quaternion\n\n\nReturn value\nc (table) – New quaternion\n\n\nFunction Information\nRotate one quaternion with another quaternion. This is mathematically equivalent to c = a * b using quaternion multiplication.\n\nExample\nlocal a = QuatEuler(0, 10, 0)\nlocal b = QuatEuler(0, 0, 45)\nlocal q = QuatRotateQuat(a, b)\n\n--q now represents a rotation first 10 degrees around\n--the Y axis and then 45 degrees around the Z axis.\n\nAPI 0.7.0"
    },
    "Transform": {
        "scope": "lua",
        "body": "Transform(pos,rot)",
        "prefix": "Transform",
        "description": "Arguments\npos (table, optional) – Vector representing transform position\nrot (table, optional) – Quaternion representing transform rotation\n\n\nReturn value\ntransform (table) – New transform\n\n\nFunction Information\nA transform is a regular lua table with two entries: pos and rot, a vector and quaternion representing transform position and rotation.\n\nExample\n--Create transform located at {0, 0, 0} with no rotation\nlocal t1 = Transform()\n\n--Create transform located at {10, 0, 0} with no rotation\nlocal t2 = Transform(Vec(10, 0,0))\n\n--Create transform located at {10, 0, 0}, rotated 45 degrees around Y axis\nlocal t2 = Transform(Vec(10, 0,0), QuatEuler(0, 45, 0))\n\nAPI 0.7.0"
    },
    "TransformCopy": {
        "scope": "lua",
        "body": "TransformCopy((${org}))",
        "prefix": "TransformCopy",
        "description": "Arguments\norg (table) – Transform\n\n\nReturn value\nnew (table) – Copy of org transform\n\n\nFunction Information\nTransforms should never be assigned like regular numbers. Since they are implemented with lua tables assignment means two references pointing to the same data. Use this function instead.\n\nExample\n--Do this to assign a quaternion\nlocal right1 = Transform(Vec(1,0,0), QuatEuler(0, 90, 0))\nlocal right2 = TransformCopy(right1)\n\n--Never do this unless you REALLY know what you're doing\nlocal wrong1 = Transform(Vec(1,0,0), QuatEuler(0, 90, 0))\nlocal wrong2 = wrong1\n\nAPI 0.7.0"
    },
    "TransformToParentTransform": {
        "scope": "lua",
        "body": "TransformToParentTransform((${parent}),(${child}))",
        "prefix": "TransformToParentTransform",
        "description": "Arguments\nparent (table) – Transform\nchild (table) – Transform\n\n\nReturn value\ntransform (table) – New transform\n\n\nFunction Information\nTransform child transform out of the parent transform. This is the opposite of TransformToLocalTransform.\n\nExample\nlocal b = GetBodyTransform(body)\nlocal s = GetShapeLocalTransform(shape)\n\n--b represents the location of body in world space\n--s represents the location of shape in body space\n\nlocal w = TransformToParentTransform(b, s)\n\n--w now represents the location of shape in world space\n\nAPI 0.7.0"
    },
    "TransformToLocalTransform": {
        "scope": "lua",
        "body": "TransformToLocalTransform((${parent}),(${child}))",
        "prefix": "TransformToLocalTransform",
        "description": "Arguments\nparent (table) – Transform\nchild (table) – Transform\n\n\nReturn value\ntransform (table) – New transform\n\n\nFunction Information\nTransform one transform into the local space of another transform. This is the opposite of TransformToParentTransform.\n\nExample\nlocal b = GetBodyTransform(body)\nlocal w = GetShapeWorldTransform(shape)\n\n--b represents the location of body in world space\n--w represents the location of shape in world space\n\nlocal s = TransformToLocalTransform(b, w)\n\n--s now represents the location of shape in body space.\n\nAPI 0.7.0"
    },
    "TransformToParentVec": {
        "scope": "lua",
        "body": "TransformToParentVec((${t}),(${v}))",
        "prefix": "TransformToParentVec",
        "description": "Arguments\nt (table) – Transform\nv (table) – Vector\n\n\nReturn value\nr (table) – Transformed vector\n\n\nFunction Information\nTransfom vector v out of transform t only considering rotation.\n\nExample\nlocal t = GetBodyTransform(body)\nlocal localUp = Vec(0, 1, 0)\nlocal up = TransformToParentVec(t, localUp)\n\n--up now represents the local body up direction in world space\n\nAPI 0.7.0"
    },
    "TransformToLocalVec": {
        "scope": "lua",
        "body": "TransformToLocalVec((${t}),(${v}))",
        "prefix": "TransformToLocalVec",
        "description": "Arguments\nt (table) – Transform\nv (table) – Vector\n\n\nReturn value\nr (table) – Transformed vector\n\n\nFunction Information\nTransfom vector v into transform t only considering rotation.\n\nExample\nlocal t = GetBodyTransform(body)\nlocal worldUp = Vec(0, 1, 0)\nlocal up = TransformToLocalVec(t, worldUp)\n\n--up now represents the world up direction in local body space\n\nAPI 0.7.0"
    },
    "TransformToParentPoint": {
        "scope": "lua",
        "body": "TransformToParentPoint((${t}),(${p}))",
        "prefix": "TransformToParentPoint",
        "description": "Arguments\nt (table) – Transform\np (table) – Vector representing position\n\n\nReturn value\nr (table) – Transformed position\n\n\nFunction Information\nTransfom position p out of transform t.\n\nExample\nlocal t = GetBodyTransform(body)\nlocal bodyPoint = Vec(0, 0, -1)\nlocal p = TransformToParentPoint(t, bodyPoint)\n\n--p now represents the local body point {0, 0, -1 } in world space\n\nAPI 0.7.0"
    },
    "TransformToLocalPoint": {
        "scope": "lua",
        "body": "TransformToLocalPoint((${t}),(${p}))",
        "prefix": "TransformToLocalPoint",
        "description": "Arguments\nt (table) – Transform\np (table) – Vector representing position\n\n\nReturn value\nr (table) – Transformed position\n\n\nFunction Information\nTransfom position p into transform t.\n\nExample\nlocal t = GetBodyTransform(body)\nlocal worldOrigo = Vec(0, 0, 0)\nlocal p = TransformToLocalPoint(t, worldOrigo)\n\n--p now represents the position of world origo in local body space\n\nAPI 0.7.0"
    },
    "SetTag": {
        "scope": "lua",
        "body": "SetTag(${handle},'${tag}',value)",
        "prefix": "SetTag",
        "description": "Arguments\nhandle (number) – Entity handle\ntag (string) – Tag name\nvalue (string, optional) – Tag value\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\n--Add \"special\" tag to an entity\nSetTag(handle, \"special\")\n\n--Add \"team\" tag to an entity and give it value \"red\"\nSetTag(handle, \"team\", \"red\")\n\nAPI 0.7.0"
    },
    "RemoveTag": {
        "scope": "lua",
        "body": "RemoveTag(${handle},'${tag}')",
        "prefix": "RemoveTag",
        "description": "Arguments\nhandle (number) – Entity handle\ntag (string) – Tag name\n\n\nReturn value\nnone\n\nFunction Information\nRemove tag from an entity. If the tag had a value it is removed too.\n\nExample\nRemoveTag(handle, \"special\")\n\nAPI 0.7.0"
    },
    "HasTag": {
        "scope": "lua",
        "body": "HasTag(${handle},'${tag}')",
        "prefix": "HasTag",
        "description": "Arguments\nhandle (number) – Entity handle\ntag (string) – Tag name\n\n\nReturn value\nexists (boolean) – Returns true if entity has tag\n\n\nFunction Information\nnone\n\nExample\nSetTag(handle, \"special\")\nlocal hasSpecial = HasTag(handle, \"special\") \n-- hasSpecial will be true\n\nAPI 0.7.0"
    },
    "GetTagValue": {
        "scope": "lua",
        "body": "GetTagValue(${handle},'${tag}')",
        "prefix": "GetTagValue",
        "description": "Arguments\nhandle (number) – Entity handle\ntag (string) – Tag name\n\n\nReturn value\nvalue (string) – Returns the tag value, if any. Empty string otherwise.\n\n\nFunction Information\nnone\n\nExample\nSetTag(handle, \"special\")\nvalue = GetTagValue(handle, \"special\")\n-- value will be \"\"\n\nSetTag(handle, \"special\", \"foo\")\nvalue = GetTagValue(handle, \"special\")\n-- value will be \"foo\"\n\nAPI 0.7.0"
    },
    "GetDescription": {
        "scope": "lua",
        "body": "GetDescription(${handle})",
        "prefix": "GetDescription",
        "description": "Arguments\nhandle (number) – Entity handle\n\n\nReturn value\ndescription (string) – The description string\n\n\nFunction Information\nAll entities can have an associated description. For bodies and shapes this can be provided through the editor. This function retrieves that description.\n\nExample\nlocal desc = GetDescription(body)\n\nAPI 0.7.0"
    },
    "SetDescription": {
        "scope": "lua",
        "body": "SetDescription(${handle},'${description}')",
        "prefix": "SetDescription",
        "description": "Arguments\nhandle (number) – Entity handle\ndescription (string) – The description string\n\n\nReturn value\nnone\n\nFunction Information\nAll entities can have an associated description. The description for bodies and shapes will show up on the HUD when looking at them.\n\nExample\nSetDescription(body, \"Target object\")\n\nAPI 0.7.0"
    },
    "Delete": {
        "scope": "lua",
        "body": "Delete(${handle})",
        "prefix": "Delete",
        "description": "Arguments\nhandle (number) – Entity handle\n\n\nReturn value\nnone\n\nFunction Information\nRemove an entity from the scene. All entities owned by this entity will also be removed.\n\nExample\nDelete(body)\n--All shapes associated with body will also be removed\n\nAPI 0.7.0"
    },
    "IsHandleValid": {
        "scope": "lua",
        "body": "IsHandleValid(${handle})",
        "prefix": "IsHandleValid",
        "description": "Arguments\nhandle (number) – Entity handle\n\n\nReturn value\nexists (boolean) – Returns true if the entity pointed to by handle still exists\n\n\nFunction Information\nnone\n\nExample\nvalid = IsHandleValid(body)\n\n--valid is true if body still exists\n\nDelete(body)\nvalid = IsHandleValid(body)\n\n--valid will now be false\n\nAPI 0.7.0"
    },
    "FindBody": {
        "scope": "lua",
        "body": "FindBody('${tag}',global)",
        "prefix": "FindBody",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nhandle (number) – Handle to first body with specified tag or zero if not found\n\n\nFunction Information\nnone\n\nExample\n--Search for a body tagged \"target\" in script scope\nlocal target = FindBody(\"target\")\n\n--Search for a body tagged \"escape\" in entire scene\nlocal escape = FindBody(\"escape\", true)\n\nAPI 0.7.0"
    },
    "FindBodies": {
        "scope": "lua",
        "body": "FindBodies('${tag}',global)",
        "prefix": "FindBodies",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nlist (table) – Indexed table with handles to all bodies with specified tag\n\n\nFunction Information\nnone\n\nExample\n--Search for bodies tagged \"target\" in script scope\nlocal targets = FindBodies(\"target\")\nfor i=1, #targets do\n\tlocal target = targets[i]\n\t...\nend\n\nAPI 0.7.0"
    },
    "GetBodyTransform": {
        "scope": "lua",
        "body": "GetBodyTransform(${handle})",
        "prefix": "GetBodyTransform",
        "description": "Arguments\nhandle (number) – Body handle\n\n\nReturn value\ntransform (table) – Transform of the body\n\n\nFunction Information\nnone\n\nExample\nlocal t = GetBodyTransform(body)\n\nAPI 0.7.0"
    },
    "SetBodyTransform": {
        "scope": "lua",
        "body": "SetBodyTransform(${handle},(${transform}))",
        "prefix": "SetBodyTransform",
        "description": "Arguments\nhandle (number) – Body handle\ntransform (table) – Desired transform\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\n--Move a body 1 meter upwards\nlocal t = GetBodyTransform(body)\nt.pos = VecAdd(t.pos, Vec(0, 1, 0))\nSetBodyTransform(body, t)\n\nAPI 0.7.0"
    },
    "GetBodyMass": {
        "scope": "lua",
        "body": "GetBodyMass(${handle})",
        "prefix": "GetBodyMass",
        "description": "Arguments\nhandle (number) – Body handle\n\n\nReturn value\nmass (number) – Body mass. Static bodies always return zero mass.\n\n\nFunction Information\nnone\n\nExample\nlocal mass = GetBodyMass(body)\n\nAPI 0.7.0"
    },
    "IsBodyDynamic": {
        "scope": "lua",
        "body": "IsBodyDynamic(${handle})",
        "prefix": "IsBodyDynamic",
        "description": "Arguments\nhandle (number) – Body handle\n\n\nReturn value\ndynamic (boolean) – Return true if body is dynamic\n\n\nFunction Information\nCheck if body is dynamic. Note that something that was created static may become dynamic due to destruction.\n\nExample\nlocal dynamic = IsBodyDynamic(body)\n\nAPI 0.7.0"
    },
    "SetBodyDynamic": {
        "scope": "lua",
        "body": "SetBodyDynamic(${handle},${dynamic})",
        "prefix": "SetBodyDynamic",
        "description": "Arguments\nhandle (number) – Body handle\ndynamic (boolean) – True for dynamic. False for static.\n\n\nReturn value\nnone\n\nFunction Information\nChange the dynamic state of a body. There is very limited use for this function. In most situations you should leave it up to the engine to decide. Use with caution.\n\nExample\nSetBodyDynamic(body, false)\n\nAPI 0.7.0"
    },
    "SetBodyVelocity": {
        "scope": "lua",
        "body": "SetBodyVelocity(${handle},handle,(${velocity}))",
        "prefix": "SetBodyVelocity",
        "description": "Arguments\nhandle (number) – Body handle (should be a dynamic body)\nvelocity (table) – Vector with linear velocity\n\n\nReturn value\nnone\n\nFunction Information\nThis can be used for animating bodies with preserved physical interaction, but in most cases you are better off with a motorized joint instead.\n\nExample\nlocal vel = Vec(2,0,0)\nSetBodyVelocity(body, vel)\n\nAPI 0.7.0"
    },
    "GetBodyVelocity": {
        "scope": "lua",
        "body": "GetBodyVelocity(${handle},handle)",
        "prefix": "GetBodyVelocity",
        "description": "Arguments\nhandle (number) – Body handle (should be a dynamic body)\n\n\nReturn value\nvelocity (table) – Linear velocity as vector\n\n\nFunction Information\nnone\n\nExample\nlocal linVel = GetBodyVelocity(body)\n\nAPI 0.7.0"
    },
    "GetBodyVelocityAtPos": {
        "scope": "lua",
        "body": "GetBodyVelocityAtPos(${handle},handle,(${pos}))",
        "prefix": "GetBodyVelocityAtPos",
        "description": "Arguments\nhandle (number) – Body handle (should be a dynamic body)\npos (table) – World space point as vector\n\n\nReturn value\nvelocity (table) – Linear velocity on body at pos as vector\n\n\nFunction Information\nReturn the velocity on a body taking both linear and angular velocity into account.\n\nExample\nlocal vel = GetBodyVelocityAtPos(body, pos)\n\nAPI 0.7.0"
    },
    "SetBodyAngularVelocity": {
        "scope": "lua",
        "body": "SetBodyAngularVelocity(${handle},handle,(${angVel}))",
        "prefix": "SetBodyAngularVelocity",
        "description": "Arguments\nhandle (number) – Body handle (should be a dynamic body)\nangVel (table) – Vector with angular velocity\n\n\nReturn value\nnone\n\nFunction Information\nThis can be used for animating bodies with preserved physical interaction, but in most cases you are better off with a motorized joint instead.\n\nExample\nlocal angVel = Vec(2,0,0)\nSetBodyAngularVelocity(body, angVel)\n\nAPI 0.7.0"
    },
    "GetBodyAngularVelocity": {
        "scope": "lua",
        "body": "GetBodyAngularVelocity(${handle},handle)",
        "prefix": "GetBodyAngularVelocity",
        "description": "Arguments\nhandle (number) – Body handle (should be a dynamic body)\n\n\nReturn value\nangVel (table) – Angular velocity as vector\n\n\nFunction Information\nnone\n\nExample\nlocal angVel = GetBodyAngularVelocity(body)\n\nAPI 0.7.0"
    },
    "IsBodyActive": {
        "scope": "lua",
        "body": "IsBodyActive(${handle})",
        "prefix": "IsBodyActive",
        "description": "Arguments\nhandle (number) – Body handle\n\n\nReturn value\nactive (boolean) – Return true if body is active\n\n\nFunction Information\nCheck if body is body is currently simulated. For performance reasons, bodies that don't move are taken out of the simulation. This function can be used to query the active state of a specific body. Only dynamic bodies can be active.\n\nExample\nif IsBodyActive(body) then\n\t...\nend\n\nAPI 0.7.0"
    },
    "ApplyBodyImpulse": {
        "scope": "lua",
        "body": "ApplyBodyImpulse(${handle},handle,(${position}),(${velocity}))",
        "prefix": "ApplyBodyImpulse",
        "description": "Arguments\nhandle (number) – Body handle (should be a dynamic body)\nposition (table) – World space position as vector\nvelocity (table) – World space impulse as vector\n\n\nReturn value\nnone\n\nFunction Information\nApply impulse to dynamic body at position (give body a push).\n\nExample\nlocal pos = Vec(0,1,0)\nlocal imp = Vec(0,0,10)\nApplyBodyImpulse(body, pos, imp)\n\nAPI 0.7.0"
    },
    "GetBodyShapes": {
        "scope": "lua",
        "body": "GetBodyShapes(${handle})",
        "prefix": "GetBodyShapes",
        "description": "Arguments\nhandle (number) – Body handle\n\n\nReturn value\nlist (table) – Indexed table of shape handles\n\n\nFunction Information\nReturn handles to all shapes owned by a body\n\nExample\nlocal shapes = GetBodyShapes(body)\nfor i=1,#shapes do\n\tlocal shape = shapes[i]\nend\n\nAPI 0.7.0"
    },
    "GetBodyVehicle": {
        "scope": "lua",
        "body": "GetBodyVehicle(${body})",
        "prefix": "GetBodyVehicle",
        "description": "Arguments\nbody (number) – Body handle\n\n\nReturn value\nhandle (number) – Get parent vehicle for body, or zero if not part of vehicle\n\n\nFunction Information\nnone\n\nExample\nlocal vehicle = GetBodyVehicle(body)\n\nAPI 0.7.0"
    },
    "GetBodyBounds": {
        "scope": "lua",
        "body": "GetBodyBounds(${handle})",
        "prefix": "GetBodyBounds",
        "description": "Arguments\nhandle (number) – Body handle\n\n\nReturn value\nmin (table) – Vector representing the AABB lower bound\nmax (table) – Vector representing the AABB upper bound\n\n\nFunction Information\nReturn the world space, axis-aligned bounding box for a body.\n\nExample\nlocal min, max = GetBodyBounds(body)\nlocal boundsSize = VecSub(max, min)\nlocal center = VecLerp(min, max, 0.5)\n\nAPI 0.7.0"
    },
    "GetBodyCenterOfMass": {
        "scope": "lua",
        "body": "GetBodyCenterOfMass(${handle})",
        "prefix": "GetBodyCenterOfMass",
        "description": "Arguments\nhandle (number) – Body handle\n\n\nReturn value\npoint (table) – Vector representing local center of mass in body space\n\n\nFunction Information\nnone\n\nExample\n--Visualize center of mass on for body\nlocal com = GetBodyCenterOfMass(body)\nlocal worldPoint = TransformToParentPoint(GetBodyTransform(body), com)\nDebugCross(worldPoint)\n\nAPI 0.7.0"
    },
    "IsBodyVisible": {
        "scope": "lua",
        "body": "IsBodyVisible(${handle},${maxDist},rejectTransparent)",
        "prefix": "IsBodyVisible",
        "description": "Arguments\nhandle (number) – Body handle\nmaxDist (number) – Maximum visible distance\nrejectTransparent (boolean, optional) – See through transparent materials. Default false.\n\n\nReturn value\nvisible (boolean) – Return true if body is visible\n\n\nFunction Information\nThis will check if a body is currently visible in the camera frustum and not occluded by other objects.\n\nExample\nif IsBodyVisible(body, 25) then\n\t--Body is within 25 meters visible to the camera\nend\n\nAPI 0.7.0"
    },
    "IsBodyBroken": {
        "scope": "lua",
        "body": "IsBodyBroken(${handle})",
        "prefix": "IsBodyBroken",
        "description": "Arguments\nhandle (number) – Body handle\n\n\nReturn value\nbroken (boolean) – Return true if body is broken\n\n\nFunction Information\nDetermine if any shape of a body has been broken.\n\nExample\nlocal broken = IsBodyBroken(body)\n\nAPI 0.7.0"
    },
    "IsBodyJointedToStatic": {
        "scope": "lua",
        "body": "IsBodyJointedToStatic(${handle})",
        "prefix": "IsBodyJointedToStatic",
        "description": "Arguments\nhandle (number) – Body handle\n\n\nReturn value\nresult (boolean) – Return true if body is in any way connected to a static body\n\n\nFunction Information\nDetermine if a body is in any way connected to a static object, either by being static itself or be being directly or indirectly jointed to something static.\n\nExample\nlocal connectedToStatic = IsBodyJointedToStatic(body)\n\nAPI 0.7.0"
    },
    "DrawBodyOutline": {
        "scope": "lua",
        "body": "DrawBodyOutline(${handle},r,g,b,${a})",
        "prefix": "DrawBodyOutline",
        "description": "Arguments\nhandle (number) – Body handle\nr (number, optional) – Red\ng (number, optional) – Green\nb (number, optional) – Blue\na (number) – Alpha\n\n\nReturn value\nnone\n\nFunction Information\nRender next frame with an outline around specified body. If no color is given, a white outline will be drawn.\n\nExample\n--Draw white outline at 50% transparency\nDrawBodyOutline(body, 0.5)\n\n--Draw green outline, fully opaque\nDrawBodyOutline(body, 0, 1, 0, 1)\n\nAPI 0.7.0"
    },
    "DrawBodyHighlight": {
        "scope": "lua",
        "body": "DrawBodyHighlight(${handle},${amount})",
        "prefix": "DrawBodyHighlight",
        "description": "Arguments\nhandle (number) – Body handle\namount (number) – Amount\n\n\nReturn value\nnone\n\nFunction Information\nFlash the appearance of a body when rendering this frame. This is used for valuables in the game.\n\nExample\nDrawBodyHighlight(body, 0.5)\n\nAPI 0.7.0"
    },
    "FindShape": {
        "scope": "lua",
        "body": "FindShape('${tag}',global)",
        "prefix": "FindShape",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nhandle (number) – Handle to first shape with specified tag or zero if not found\n\n\nFunction Information\nnone\n\nExample\n--Search for a shape tagged \"mybox\" in script scope\nlocal target = FindShape(\"mybox\")\n\n--Search for a shape tagged \"laserturret\" in entire scene\nlocal escape = FindShape(\"laserturret\", true)\n\nAPI 0.7.0"
    },
    "FindShapes": {
        "scope": "lua",
        "body": "FindShapes('${tag}',global)",
        "prefix": "FindShapes",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nlist (table) – Indexed table with handles to all shapes with specified tag\n\n\nFunction Information\nnone\n\nExample\n--Search for shapes tagged \"alarmbox\" in script scope\nlocal shapes = FindShapes(\"alarmbox\")\nfor i=1, #shapes do\n\tlocal shape = shapes[i]\n\t...\nend\n\nAPI 0.7.0"
    },
    "GetShapeLocalTransform": {
        "scope": "lua",
        "body": "GetShapeLocalTransform(${handle})",
        "prefix": "GetShapeLocalTransform",
        "description": "Arguments\nhandle (number) – Shape handle\n\n\nReturn value\ntransform (table) – Return shape transform in body space\n\n\nFunction Information\nnone\n\nExample\n--Shape transform in body local space\nlocal shapeTransform = GetShapeLocalTransform(shape)\n\n--Body transform in world space\nlocal bodyTransform = GetBodyTransform(GetShapeBody(shape))\n\n--Shape transform in world space\nlocal worldTranform = TransformToParentTransform(bodyTransform, shapeTransform)\n\nAPI 0.7.0"
    },
    "SetShapeLocalTransform": {
        "scope": "lua",
        "body": "SetShapeLocalTransform(${handle},(${transform}))",
        "prefix": "SetShapeLocalTransform",
        "description": "Arguments\nhandle (number) – Shape handle\ntransform (table) – Shape transform in body space\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nlocal transform = Transform(Vec(0, 1, 0), QuatEuler(0, 90, 0))\nSetShapeLocalTransform(shape, transform)\n\nAPI 0.7.0"
    },
    "GetShapeWorldTransform": {
        "scope": "lua",
        "body": "GetShapeWorldTransform(${handle})",
        "prefix": "GetShapeWorldTransform",
        "description": "Arguments\nhandle (number) – Shape handle\n\n\nReturn value\ntransform (table) – Return shape transform in world space\n\n\nFunction Information\nThis is a convenience function, transforming the shape out of body space\n\nExample\nlocal worldTransform = GetShapeWorldTransform(shape)\n\n--This is equivalent to\nlocal shapeTransform = GetShapeLocalTransform(shape)\nlocal bodyTransform = GetBodyTransform(GetShapeBody(shape))\nworldTranform = TransformToParentTransform(bodyTransform, shapeTransform)\n\nAPI 0.7.0"
    },
    "GetShapeBody": {
        "scope": "lua",
        "body": "GetShapeBody(${handle})",
        "prefix": "GetShapeBody",
        "description": "Arguments\nhandle (number) – Shape handle\n\n\nReturn value\nhandle (number) – Body handle\n\n\nFunction Information\nGet handle to the body this shape is owned by. A shape is always owned by a body, but can be transfered to a new body during destruction.\n\nExample\nlocal body = GetShapeBody(shape)\n\nAPI 0.7.0"
    },
    "GetShapeJoints": {
        "scope": "lua",
        "body": "GetShapeJoints(${shape})",
        "prefix": "GetShapeJoints",
        "description": "Arguments\nshape (number) – Shape handle\n\n\nReturn value\nlist (table) – Indexed table with joints connected to shape\n\n\nFunction Information\nnone\n\nExample\nlocal hinges = GetShapeJoints(door)\nfor i=1, #hinges do\n\tlocal joint = hinges[i]\n\t...\nend\n\nAPI 0.7.0"
    },
    "GetShapeLights": {
        "scope": "lua",
        "body": "GetShapeLights(${shape})",
        "prefix": "GetShapeLights",
        "description": "Arguments\nshape (number) – Shape handle\n\n\nReturn value\nlist (table) – Indexed table of lights owned by shape\n\n\nFunction Information\nnone\n\nExample\nlocal lights = GetShapeLights(shape)\nfor i=1, #lights do\n\tlocal light = lights[i]\n\t...\nend\n\nAPI 0.7.0"
    },
    "GetShapeBounds": {
        "scope": "lua",
        "body": "GetShapeBounds(${handle})",
        "prefix": "GetShapeBounds",
        "description": "Arguments\nhandle (number) – Shape handle\n\n\nReturn value\nmin (table) – Vector representing the AABB lower bound\nmax (table) – Vector representing the AABB upper bound\n\n\nFunction Information\nReturn the world space, axis-aligned bounding box for a shape.\n\nExample\nlocal min, max = GetShapeBounds(shape)\nlocal boundsSize = VecSub(max, min)\nlocal center = VecLerp(min, max, 0.5)\n\nAPI 0.7.0"
    },
    "SetShapeEmissiveScale": {
        "scope": "lua",
        "body": "SetShapeEmissiveScale(${handle},${scale})",
        "prefix": "SetShapeEmissiveScale",
        "description": "Arguments\nhandle (number) – Shape handle\nscale (number) – Scale factor for emissiveness\n\n\nReturn value\nnone\n\nFunction Information\nScale emissiveness for shape. If the shape has light sources attached, their intensity will be scaled by the same amount.\n\nExample\n--Pulsate emissiveness and light intensity for shape\nlocal scale = math.sin(GetTime())*0.5 + 0.5\nSetShapeEmissiveScale(shape, scale)\n\nAPI 0.7.0"
    },
    "GetShapeMaterialAtPosition": {
        "scope": "lua",
        "body": "GetShapeMaterialAtPosition(${handle},(${pos}))",
        "prefix": "GetShapeMaterialAtPosition",
        "description": "Arguments\nhandle (number) – Shape handle\npos (table) – Position in world space\n\n\nReturn value\ntype (string) – Material type\nr (number) – Red\ng (number) – Green\nb (number) – Blue\na (number) – Alpha\n\n\nFunction Information\nReturn material properties for a particular voxel\n\nExample\nlocal hit, dist, normal, shape = QueryRaycast(pos, dir, 10)\nif hit then\n\tlocal hitPoint = VecAdd(pos, VecScale(dir, dist))\n\tlocal mat = GetShapeMaterialAtPosition(shape, hitPoint)\n\tDebugPrint(\"Raycast hit voxel made out of \" .. mat)\nend\n\nAPI 0.7.0"
    },
    "GetShapeSize": {
        "scope": "lua",
        "body": "GetShapeSize(${handle})",
        "prefix": "GetShapeSize",
        "description": "Arguments\nhandle (number) – Shape handle\n\n\nReturn value\nxsize (number) – Size in voxels along x axis\nysize (number) – Size in voxels along y axis\nzsize (number) – Size in voxels along z axis\n\n\nFunction Information\nReturn the size of a shape in voxels\n\nExample\nlocal x, y, z = GetShapeSize(shape)\n\nAPI 0.7.0"
    },
    "GetShapeVoxelCount": {
        "scope": "lua",
        "body": "GetShapeVoxelCount(${handle})",
        "prefix": "GetShapeVoxelCount",
        "description": "Arguments\nhandle (number) – Shape handle\n\n\nReturn value\ncount (number) – Number of voxels in shape\n\n\nFunction Information\nReturn the number of voxels in a shape, not including empty space\n\nExample\nlocal voxelCount = GetShapeVoxelCount(shape)\n\nAPI 0.7.0"
    },
    "IsShapeVisible": {
        "scope": "lua",
        "body": "IsShapeVisible(${handle},${maxDist},rejectTransparent)",
        "prefix": "IsShapeVisible",
        "description": "Arguments\nhandle (number) – Shape handle\nmaxDist (number) – Maximum visible distance\nrejectTransparent (boolean, optional) – See through transparent materials. Default false.\n\n\nReturn value\nvisible (boolean) – Return true if shape is visible\n\n\nFunction Information\nThis will check if a shape is currently visible in the camera frustum and not occluded by other objects.\n\nExample\nif IsShapeVisible(shape, 25) then\n\t--Shape is within 25 meters visible to the camera\nend\n\nAPI 0.7.0"
    },
    "IsShapeBroken": {
        "scope": "lua",
        "body": "IsShapeBroken(${handle})",
        "prefix": "IsShapeBroken",
        "description": "Arguments\nhandle (number) – Shape handle\n\n\nReturn value\nbroken (boolean) – Return true if shape is broken\n\n\nFunction Information\nDetermine if shape has been broken. Note that a shape can be transfered to another body during destruction, but might still not be considered broken if all voxels are intact.\n\nExample\nlocal broken = IsShapeBroken(shape)\n\nAPI 0.7.0"
    },
    "DrawShapeOutline": {
        "scope": "lua",
        "body": "DrawShapeOutline(${handle},r,g,b,${a})",
        "prefix": "DrawShapeOutline",
        "description": "Arguments\nhandle (number) – Shape handle\nr (number, optional) – Red\ng (number, optional) – Green\nb (number, optional) – Blue\na (number) – Alpha\n\n\nReturn value\nnone\n\nFunction Information\nRender next frame with an outline around specified shape. If no color is given, a white outline will be drawn.\n\nExample\n--Draw white outline at 50% transparency\nDrawShapeOutline(shape, 0.5)\n\n--Draw green outline, fully opaque\nDrawShapeOutline(shape, 0, 1, 0, 1)\n\nAPI 0.7.0"
    },
    "DrawShapeHighlight": {
        "scope": "lua",
        "body": "DrawShapeHighlight(${handle},${amount})",
        "prefix": "DrawShapeHighlight",
        "description": "Arguments\nhandle (number) – Shape handle\namount (number) – Amount\n\n\nReturn value\nnone\n\nFunction Information\nFlash the appearance of a shape when rendering this frame.\n\nExample\nDrawShapeHighlight(shape, 0.5)\n\nAPI 0.7.0"
    },
    "FindLocation": {
        "scope": "lua",
        "body": "FindLocation('${tag}',global)",
        "prefix": "FindLocation",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nhandle (number) – Handle to first location with specified tag or zero if not found\n\n\nFunction Information\nnone\n\nExample\nlocal loc = FindLocation(\"start\")\n\nAPI 0.7.0"
    },
    "FindLocations": {
        "scope": "lua",
        "body": "FindLocations('${tag}',global)",
        "prefix": "FindLocations",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nlist (table) – Indexed table with handles to all locations with specified tag\n\n\nFunction Information\nnone\n\nExample\n--Search for locations tagged \"waypoint\" in script scope\nlocal locations = FindLocations(\"waypoint\")\nfor i=1, #locs do\n\tlocal locs = locations[i]\n\t...\nend\n\nAPI 0.7.0"
    },
    "GetLocationTransform": {
        "scope": "lua",
        "body": "GetLocationTransform(${handle})",
        "prefix": "GetLocationTransform",
        "description": "Arguments\nhandle (number) – Location handle\n\n\nReturn value\ntransform (table) – Transform of the location\n\n\nFunction Information\nnone\n\nExample\nlocal t = GetLocationTransform(loc)\n\nAPI 0.7.0"
    },
    "FindJoint": {
        "scope": "lua",
        "body": "FindJoint('${tag}',global)",
        "prefix": "FindJoint",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nhandle (number) – Handle to first joint with specified tag or zero if not found\n\n\nFunction Information\nnone\n\nExample\nlocal joint = FindJoint(\"doorhinge\")\n\nAPI 0.7.0"
    },
    "FindJoints": {
        "scope": "lua",
        "body": "FindJoints('${tag}',global)",
        "prefix": "FindJoints",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nlist (table) – Indexed table with handles to all joints with specified tag\n\n\nFunction Information\nnone\n\nExample\n--Search for locations tagged \"doorhinge\" in script scope\nlocal hinges = FindJoints(\"doorhinge\")\nfor i=1, #hinges do\n\tlocal joint = hinges[i]\n\t...\nend\n\nAPI 0.7.0"
    },
    "IsJointBroken": {
        "scope": "lua",
        "body": "IsJointBroken(${joint})",
        "prefix": "IsJointBroken",
        "description": "Arguments\njoint (number) – Joint handle\n\n\nReturn value\nbroken (boolean) – True if joint is broken\n\n\nFunction Information\nnone\n\nExample\nlocal broken = IsJointBroken(joint)\n\nAPI 0.7.0"
    },
    "GetJointType": {
        "scope": "lua",
        "body": "GetJointType(${joint})",
        "prefix": "GetJointType",
        "description": "Arguments\njoint (number) – Joint handle\n\n\nReturn value\ntype (string) – Joint type\n\n\nFunction Information\nJoint type is one of the following: \"ball\", \"hinge\", \"prismatic\" or \"rope\". An empty string is returned if joint handle is invalid.\n\nExample\nif GetJointType(joint) == \"rope\" then\n\t--Joint is rope\nend\n\nAPI 0.7.0"
    },
    "GetJointOtherShape": {
        "scope": "lua",
        "body": "GetJointOtherShape(${joint},${shape})",
        "prefix": "GetJointOtherShape",
        "description": "Arguments\njoint (number) – Joint handle\nshape (number) – Shape handle\n\n\nReturn value\nother (number) – Other shape handle\n\n\nFunction Information\nA joint is always connected to two shapes. Use this function if you know one shape and want to find the other one.\n\nExample\n--joint is connected to a and b\n\notherShape = GetJointOtherShape(joint, a)\n--otherShape is now b\n\notherShape = GetJointOtherShape(joint, b)\n--otherShape is now a\n\nAPI 0.7.0"
    },
    "SetJointMotor": {
        "scope": "lua",
        "body": "SetJointMotor(${joint},${velocity},strength)",
        "prefix": "SetJointMotor",
        "description": "Arguments\njoint (number) – Joint handle\nvelocity (number) – Desired velocity\nstrength (number, optional) – Desired strength. Default is infinite. Zero to disable.\n\n\nReturn value\nnone\n\nFunction Information\nSet joint motor target velocity. If joint is of type hinge, velocity is given in radians per second angular velocity. If joint type is prismatic joint velocity is given in meters per second. Calling this function will override and void any previous call to SetJointMotorTarget.\n\nExample\n--Set motor speed to 0.5 radians per second\nSetJointMotor(hinge, 0.5)\n\nAPI 0.7.0"
    },
    "SetJointMotorTarget": {
        "scope": "lua",
        "body": "SetJointMotorTarget(${joint},${target},maxVel,strength)",
        "prefix": "SetJointMotorTarget",
        "description": "Arguments\njoint (number) – Joint handle\ntarget (number) – Desired movement target\nmaxVel (number, optional) – Maximum velocity to reach target. Default is infinite.\nstrength (number, optional) – Desired strength. Default is infinite. Zero to disable.\n\n\nReturn value\nnone\n\nFunction Information\nIf a joint has a motor target, it will try to maintain its relative movement. This is very useful for elevators or other animated, jointed mechanisms. If joint is of type hinge, target is an angle in degrees (-180 to 180) and velocity is given in radians per second. If joint type is prismatic, target is given in meters and velocity is given in meters per second. Setting a motor target will override any previous call to SetJointMotor.\n\nExample\n--Make joint reach a 45 degree angle, going at a maximum of 3 radians per second\nSetJointMotorTarget(hinge, 45, 3)\n\nAPI 0.7.0"
    },
    "GetJointLimits": {
        "scope": "lua",
        "body": "GetJointLimits(${joint})",
        "prefix": "GetJointLimits",
        "description": "Arguments\njoint (number) – Joint handle\n\n\nReturn value\nmin (number) – Minimum joint limit (angle or distance)\nmax (number) – Maximum joint limit (angle or distance)\n\n\nFunction Information\nReturn joint limits for hinge or prismatic joint. Returns angle or distance depending on joint type.\n\nExample\nlocal min, max = GetJointLimits(hinge)\n\nAPI 0.7.0"
    },
    "GetJointMovement": {
        "scope": "lua",
        "body": "GetJointMovement(${joint})",
        "prefix": "GetJointMovement",
        "description": "Arguments\njoint (number) – Joint handle\n\n\nReturn value\nmovement (number) – Current joint position or angle\n\n\nFunction Information\nReturn the current position or angle or the joint, measured in same way as joint limits.\n\nExample\nlocal current = GetJointMovement(hinge)\n\nAPI 0.7.0"
    },
    "FindLight": {
        "scope": "lua",
        "body": "FindLight('${tag}',global)",
        "prefix": "FindLight",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nhandle (number) – Handle to first light with specified tag or zero if not found\n\n\nFunction Information\nnone\n\nExample\nlocal light = FindLight(\"main\")\n\nAPI 0.7.0"
    },
    "FindLights": {
        "scope": "lua",
        "body": "FindLights('${tag}',global)",
        "prefix": "FindLights",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nlist (table) – Indexed table with handles to all lights with specified tag\n\n\nFunction Information\nnone\n\nExample\n--Search for lights tagged \"main\" in script scope\nlocal lights = FindLights(\"main\")\nfor i=1, #lights do\n\tlocal light = lights[i]\n\t...\nend\n\nAPI 0.7.0"
    },
    "SetLightEnabled": {
        "scope": "lua",
        "body": "SetLightEnabled(${handle},${enabled})",
        "prefix": "SetLightEnabled",
        "description": "Arguments\nhandle (number) – Light handle\nenabled (boolean) – Set to true if light should be enabled\n\n\nReturn value\nnone\n\nFunction Information\nIf light is owned by a shape, the emissive scale of that shape will be set to 0.0 when light is disabled and 1.0 when light is enabled.\n\nExample\nSetLightEnabled(light, false)\n\nAPI 0.7.0"
    },
    "SetLightColor": {
        "scope": "lua",
        "body": "SetLightColor(${handle},${r},${g},${b})",
        "prefix": "SetLightColor",
        "description": "Arguments\nhandle (number) – Light handle\nr (number) – Red value\ng (number) – Green value\nb (number) – Blue value\n\n\nReturn value\nnone\n\nFunction Information\nThis will only set the color tint of the light. Use SetLightIntensity for brightness. Setting the light color will not affect the emissive color of a parent shape.\n\nExample\n--Set light color to yellow\nSetLightColor(light, 1, 1, 0)\n\nAPI 0.7.0"
    },
    "SetLightIntensity": {
        "scope": "lua",
        "body": "SetLightIntensity(${handle},${intensity})",
        "prefix": "SetLightIntensity",
        "description": "Arguments\nhandle (number) – Light handle\nintensity (number) – Desired intensity of the light\n\n\nReturn value\nnone\n\nFunction Information\nIf the shape is owned by a shape you most likely want to use SetShapeEmissiveScale instead, which will affect both the emissiveness of the shape and the brightness of the light at the same time.\n\nExample\n--Pulsate light\nSetLightIntensity(light, math.sin(GetTime())*0.5 + 1.0)\n\nAPI 0.7.0"
    },
    "GetLightTransform": {
        "scope": "lua",
        "body": "GetLightTransform(${handle})",
        "prefix": "GetLightTransform",
        "description": "Arguments\nhandle (number) – Light handle\n\n\nReturn value\ntransform (table) – World space light transform\n\n\nFunction Information\nLights that are owned by a dynamic shape are automatcially moved with that shape\n\nExample\nlocal pos = GetLightTransform(light).pos\n\nAPI 0.7.0"
    },
    "GetLightShape": {
        "scope": "lua",
        "body": "GetLightShape(${handle})",
        "prefix": "GetLightShape",
        "description": "Arguments\nhandle (number) – Light handle\n\n\nReturn value\nhandle (number) – Shape handle or zero if not attached to shape\n\n\nFunction Information\nnone\n\nExample\nlocal shape = GetLightShape(light)\n\nAPI 0.7.0"
    },
    "IsLightActive": {
        "scope": "lua",
        "body": "IsLightActive(${handle})",
        "prefix": "IsLightActive",
        "description": "Arguments\nhandle (number) – Light handle\n\n\nReturn value\nactive (boolean) – True if light is currently emitting light\n\n\nFunction Information\nnone\n\nExample\nif IsLightActive(light) then\n\t--Do something\nend\n\nAPI 0.7.0"
    },
    "IsPointAffectedByLight": {
        "scope": "lua",
        "body": "IsPointAffectedByLight(${handle},(${point}))",
        "prefix": "IsPointAffectedByLight",
        "description": "Arguments\nhandle (number) – Light handle\npoint (table) – World space point as vector\n\n\nReturn value\naffected (boolean) – Return true if point is in light cone and range\n\n\nFunction Information\nnone\n\nExample\nlocal point = Vec(0, 10, 0)\nlocal affected = IsPointAffectedByLight(light, point)\n\nAPI 0.7.0"
    },
    "FindTrigger": {
        "scope": "lua",
        "body": "FindTrigger('${tag}',global)",
        "prefix": "FindTrigger",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nhandle (number) – Handle to first trigger with specified tag or zero if not found\n\n\nFunction Information\nnone\n\nExample\nlocal goal = FindTrigger(\"goal\")\n\nAPI 0.7.0"
    },
    "FindTriggers": {
        "scope": "lua",
        "body": "FindTriggers('${tag}',global)",
        "prefix": "FindTriggers",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nlist (table) – Indexed table with handles to all triggers with specified tag\n\n\nFunction Information\nnone\n\nExample\n--Find triggers tagged \"toxic\" in script scope\nlocal triggers = FindTriggers(\"toxic\")\nfor i=1, #triggers do\n\tlocal trigger = triggers[i]\n\t...\nend\n\nAPI 0.7.0"
    },
    "GetTriggerTransform": {
        "scope": "lua",
        "body": "GetTriggerTransform(${handle})",
        "prefix": "GetTriggerTransform",
        "description": "Arguments\nhandle (number) – Trigger handle\n\n\nReturn value\ntransform (table) – Current trigger transform in world space\n\n\nFunction Information\nnone\n\nExample\nlocal t = GetTriggerTransform(trigger)\n\nAPI 0.7.0"
    },
    "SetTriggerTransform": {
        "scope": "lua",
        "body": "SetTriggerTransform(${handle},(${transform}))",
        "prefix": "SetTriggerTransform",
        "description": "Arguments\nhandle (number) – Trigger handle\ntransform (table) – Desired trigger transform in world space\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nlocal t = Transform(Vec(0, 1, 0), QuatEuler(0, 90, 0))\nSetTriggerTransform(trigger, t)\n\nAPI 0.7.0"
    },
    "GetTriggerBounds": {
        "scope": "lua",
        "body": "GetTriggerBounds(${handle})",
        "prefix": "GetTriggerBounds",
        "description": "Arguments\nhandle (number) – Trigger handle\n\n\nReturn value\nmin (table) – Lower point of trigger bounds in world space\nmax (table) – Upper point of trigger bounds in world space\n\n\nFunction Information\nReturn the lower and upper points in world space of the trigger axis aligned bounding box\n\nExample\nlocal mi, ma = GetTriggerBounds(trigger)\nlocal list = QueryAabbShapes(mi, ma)\n\nAPI 0.7.0"
    },
    "IsBodyInTrigger": {
        "scope": "lua",
        "body": "IsBodyInTrigger(${trigger},${body})",
        "prefix": "IsBodyInTrigger",
        "description": "Arguments\ntrigger (number) – Trigger handle\nbody (number) – Body handle\n\n\nReturn value\nnone\n\nFunction Information\nThis function will only check the center point of the body\n\nExample\nif IsBodyInTrigger(trigger, body) then\n\t...\nend\n\nAPI 0.7.0"
    },
    "IsVehicleInTrigger": {
        "scope": "lua",
        "body": "IsVehicleInTrigger(${trigger},${vehicle})",
        "prefix": "IsVehicleInTrigger",
        "description": "Arguments\ntrigger (number) – Trigger handle\nvehicle (number) – Vehicle handle\n\n\nReturn value\nnone\n\nFunction Information\nThis function will only check origo of vehicle\n\nExample\nif IsVehicleInTrigger(trigger, vehicle) then\n\t...\nend\n\nAPI 0.7.0"
    },
    "IsShapeInTrigger": {
        "scope": "lua",
        "body": "IsShapeInTrigger(${trigger},${shape})",
        "prefix": "IsShapeInTrigger",
        "description": "Arguments\ntrigger (number) – Trigger handle\nshape (number) – Shape handle\n\n\nReturn value\nnone\n\nFunction Information\nThis function will only check the center point of the shape\n\nExample\nif IsShapeInTrigger(trigger, shape) then\n\t...\nend\n\nAPI 0.7.0"
    },
    "IsPointInTrigger": {
        "scope": "lua",
        "body": "IsPointInTrigger(${trigger},(${point}))",
        "prefix": "IsPointInTrigger",
        "description": "Arguments\ntrigger (number) – Trigger handle\npoint (table) – Word space point as vector\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nlocal p = Vec(0, 10, 0)\nif IsPointInTrigger(trigger, p) then\n\t...\nend\n\nAPI 0.7.0"
    },
    "IsTriggerEmpty": {
        "scope": "lua",
        "body": "IsTriggerEmpty(${handle},demolision)",
        "prefix": "IsTriggerEmpty",
        "description": "Arguments\nhandle (number) – Trigger handle\ndemolision (boolean, optional) – If true, small debris and vehicles are ignored\n\n\nReturn value\nempty (boolean) – True if trigger is empty\nmaxpoint (table) – World space point of highest point (largest Y coordinate) if not empty\n\n\nFunction Information\nThis function will check if trigger is empty. If trigger contains any part of a body it will return false and the highest point as second return value.\n\nExample\nlocal empty, highPoint = IsTriggerEmpty(trigger)\nif not empty then\n\t--highPoint[2] is the tallest point in trigger\nend\n\nAPI 0.7.0"
    },
    "FindScreen": {
        "scope": "lua",
        "body": "FindScreen('${tag}',global)",
        "prefix": "FindScreen",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nhandle (number) – Handle to first screen with specified tag or zero if not found\n\n\nFunction Information\nnone\n\nExample\nlocal screen = FindTrigger(\"tv\")\n\nAPI 0.7.0"
    },
    "FindScreens": {
        "scope": "lua",
        "body": "FindScreens('${tag}',global)",
        "prefix": "FindScreens",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nlist (table) – Indexed table with handles to all screens with specified tag\n\n\nFunction Information\nnone\n\nExample\n--Find screens tagged \"tv\" in script scope\nlocal screens = FindScreens(\"tv\")\nfor i=1, #screens do\n\tlocal screen = screens[i]\n\t...\nend\n\nAPI 0.7.0"
    },
    "SetScreenEnabled": {
        "scope": "lua",
        "body": "SetScreenEnabled(${screen},${enabled})",
        "prefix": "SetScreenEnabled",
        "description": "Arguments\nscreen (number) – Screen handle\nenabled (boolean) – True if screen should be enabled\n\n\nReturn value\nnone\n\nFunction Information\nEnable or disable screen\n\nExample\nSetScreenEnabled(screen, true)\n\nAPI 0.7.0"
    },
    "IsScreenEnabled": {
        "scope": "lua",
        "body": "IsScreenEnabled(${screen})",
        "prefix": "IsScreenEnabled",
        "description": "Arguments\nscreen (number) – Screen handle\n\n\nReturn value\nenabled (boolean) – True if screen is enabled\n\n\nFunction Information\nnone\n\nExample\nlocal b = IsScreenEnabled(screen)\n\nAPI 0.7.0"
    },
    "GetScreenShape": {
        "scope": "lua",
        "body": "GetScreenShape(${screen})",
        "prefix": "GetScreenShape",
        "description": "Arguments\nscreen (number) – Screen handle\n\n\nReturn value\nshape (number) – Shape handle or zero if none\n\n\nFunction Information\nReturn handle to the parent shape of a screen\n\nExample\nlocal shape = GetScreenShape(screen)\n\nAPI 0.7.0"
    },
    "FindVehicle": {
        "scope": "lua",
        "body": "FindVehicle('${tag}',global)",
        "prefix": "FindVehicle",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nhandle (number) – Handle to first vehicle with specified tag or zero if not found\n\n\nFunction Information\nnone\n\nExample\nlocal vehicle = FindVehicle(\"mycar\")\n\nAPI 0.7.0"
    },
    "FindVehicles": {
        "scope": "lua",
        "body": "FindVehicles('${tag}',global)",
        "prefix": "FindVehicles",
        "description": "Arguments\ntag (string) – Tag name\nglobal (boolean, optional) – Search in entire scene\n\n\nReturn value\nlist (table) – Indexed table with handles to all vehicles with specified tag\n\n\nFunction Information\nnone\n\nExample\n--Find all vehicles in level tagged \"boat\"\nlocal boats = FindVehicles(\"boat\")\nfor i=1, #boats do\n\tlocal boat = boats[i]\n\t...\nend\n\nAPI 0.7.0"
    },
    "GetVehicleTransform": {
        "scope": "lua",
        "body": "GetVehicleTransform(${vehicle})",
        "prefix": "GetVehicleTransform",
        "description": "Arguments\nvehicle (number) – Vehicle handle\n\n\nReturn value\ntransform (table) – Transform of vehicle\n\n\nFunction Information\nnone\n\nExample\nlocal t = GetVehicleTransform(vehicle)\n\nAPI 0.7.0"
    },
    "GetVehicleBody": {
        "scope": "lua",
        "body": "GetVehicleBody(${vehicle})",
        "prefix": "GetVehicleBody",
        "description": "Arguments\nvehicle (number) – Vehicle handle\n\n\nReturn value\nbody (number) – Main body of vehicle\n\n\nFunction Information\nnone\n\nExample\nlocal body = GetVehicleBody(vehicle)\nif IsBodyBroken(body) then\n--Vehicle body is broken\nend\n\nAPI 0.7.0"
    },
    "GetVehicleHealth": {
        "scope": "lua",
        "body": "GetVehicleHealth(${vehicle})",
        "prefix": "GetVehicleHealth",
        "description": "Arguments\nvehicle (number) – Vehicle handle\n\n\nReturn value\nhealth (number) – Vehicle health (zero to one)\n\n\nFunction Information\nnone\n\nExample\nlocal health = GetVehicleHealth(vehicle)\n\nAPI 0.7.0"
    },
    "GetVehicleDriverPos": {
        "scope": "lua",
        "body": "GetVehicleDriverPos(${vehicle})",
        "prefix": "GetVehicleDriverPos",
        "description": "Arguments\nvehicle (number) – Vehicle handle\n\n\nReturn value\npos (table) – Driver position as vector in vehicle space\n\n\nFunction Information\nnone\n\nExample\nlocal driverPos = GetVehicleDriverPos(vehicle)\nlocal t = GetVehicleTransform(vehicle)\nlocal worldPos = TransformToParentPoint(t, driverPos)\n\nAPI 0.7.0"
    },
    "DriveVehicle": {
        "scope": "lua",
        "body": "DriveVehicle(${vehicle},${drive},${steering},${handbrake})",
        "prefix": "DriveVehicle",
        "description": "Arguments\nvehicle (number) – Vehicle handle\ndrive (number) – Reverse/forward control -1 to 1\nsteering (number) – Left/right control -1 to 1\nhandbrake (boolean) – Handbrake control\n\n\nReturn value\nnone\n\nFunction Information\nThis function applies input to vehicles, allowing for autonomous driving. The vehicle will be turned on automatically and turned off when no longer called. Call this from the tick function, not update.\n\nExample\nfunction tick()\n\t--Drive mycar forwards\n\tlocal v = FindVehicle(\"mycar\")\n\tDriveVehicle(v, 1, 0, false)\nend\n\nAPI 0.7.0"
    },
    "GetPlayerPos": {
        "scope": "lua",
        "body": "GetPlayerPos()",
        "prefix": "GetPlayerPos",
        "description": "Arguments\nnone\n\nReturn value\nposition (table) – Player center position\n\n\nFunction Information\nReturn center point of player. This function is deprecated. Use GetPlayerTransform instead.\n\nExample\nlocal p = GetPlayerPos()\n\n--This is equivalent to\np = VecAdd(GetPlayerTransform().pos, Vec(0,1,0))\n\nAPI 0.7.0"
    },
    "GetPlayerTransform": {
        "scope": "lua",
        "body": "GetPlayerTransform(${includePitch},pitch)",
        "prefix": "GetPlayerTransform",
        "description": "Arguments\nincludePitch (boolean) – Include the player pitch (look up/down) in transform\n\n\nReturn value\ntransform (table) – Current player transform\n\n\nFunction Information\nThe player transform is located at the bottom of the player. The player transform considers heading (looking left and right). Forward is along negative Z axis. Player pitch (looking up and down) does not affect player transform unless includePitch is set to true. If you want the transform of the eye, use GetPlayerCameraTransform() instead.\n\nExample\nlocal t = GetPlayerTransform()\n\nAPI 0.7.0"
    },
    "SetPlayerTransform": {
        "scope": "lua",
        "body": "SetPlayerTransform((${transform}),${includePitch},pitch)",
        "prefix": "SetPlayerTransform",
        "description": "Arguments\ntransform (table) – Desired player transform\nincludePitch (boolean) – Set player pitch (look up/down) as well\n\n\nReturn value\nnone\n\nFunction Information\nInstantly teleport the player to desired transform. Unless includePitch is set to true, up/down look angle will be set to zero during this process. Player velocity will be reset to zero.\n\nExample\nlocal t = Transform(Vec(10, 0, 0), QuatEuler(0, 90, 0))\nSetPlayerTransform(t)\n\nAPI 0.7.0"
    },
    "GetPlayerCameraTransform": {
        "scope": "lua",
        "body": "GetPlayerCameraTransform()",
        "prefix": "GetPlayerCameraTransform",
        "description": "Arguments\nnone\n\nReturn value\ntransform (table) – Current player camera transform\n\n\nFunction Information\nThe player camera transform is usually the same as what you get from GetCameraTransform, but if you have set a camera transform manually with SetCameraTransform, you can retrieve the standard player camera transform with this function.\n\nExample\nlocal t = GetPlayerCameraTransform()\n\nAPI 0.7.0"
    },
    "SetPlayerSpawnTransform": {
        "scope": "lua",
        "body": "SetPlayerSpawnTransform((${transform}))",
        "prefix": "SetPlayerSpawnTransform",
        "description": "Arguments\ntransform (table) – Desired player spawn transform\n\n\nReturn value\nnone\n\nFunction Information\nCall this function during init to alter the player spawn transform.\n\nExample\nlocal t = Transform(Vec(10, 0, 0), QuatEuler(0, 90, 0))\nSetPlayerSpawnTransform(t)\n\nAPI 0.7.0"
    },
    "GetPlayerVelocity": {
        "scope": "lua",
        "body": "GetPlayerVelocity()",
        "prefix": "GetPlayerVelocity",
        "description": "Arguments\nnone\n\nReturn value\nvelocity (table) – Player velocity in world space as vector\n\n\nFunction Information\nnone\n\nExample\nlocal vel = GetPlayerVelocity()\n\nAPI 0.7.0"
    },
    "SetPlayerVehicle": {
        "scope": "lua",
        "body": "SetPlayerVehicle(vehicle)",
        "prefix": "SetPlayerVehicle",
        "description": "Arguments\nvehicle (value) – Handle to vehicle or zero to not drive.\n\n\nReturn value\nnone\n\nFunction Information\nDrive specified vehicle.\n\nExample\nlocal car = FindVehicle(\"mycar\")\nSetPlayerVehicle(car)\n\nAPI 0.7.0"
    },
    "SetPlayerVelocity": {
        "scope": "lua",
        "body": "SetPlayerVelocity((${velocity}))",
        "prefix": "SetPlayerVelocity",
        "description": "Arguments\nvelocity (table) – Player velocity in world space as vector\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nSetPlayerVelocity(Vec(0, 5, 0))\n\nAPI 0.7.0"
    },
    "GetPlayerVehicle": {
        "scope": "lua",
        "body": "GetPlayerVehicle()",
        "prefix": "GetPlayerVehicle",
        "description": "Arguments\nnone\n\nReturn value\nhandle (number) – Current vehicle handle, or zero if not in vehicle\n\n\nFunction Information\nnone\n\nExample\nlocal vehicle = GetPlayerVehicle()\nif vehicle ~= 0 then\n\t...\nend\n\nAPI 0.7.0"
    },
    "GetPlayerGrabShape": {
        "scope": "lua",
        "body": "GetPlayerGrabShape()",
        "prefix": "GetPlayerGrabShape",
        "description": "Arguments\nnone\n\nReturn value\nhandle (number) – Handle to grabbed shape or zero if not grabbing.\n\n\nFunction Information\nnone\n\nExample\nlocal shape = GetPlayerGrabShape()\nif shape ~= 0 then\n\t...\nend\n\nAPI 0.7.0"
    },
    "GetPlayerGrabBody": {
        "scope": "lua",
        "body": "GetPlayerGrabBody()",
        "prefix": "GetPlayerGrabBody",
        "description": "Arguments\nnone\n\nReturn value\nhandle (number) – Handle to grabbed body or zero if not grabbing.\n\n\nFunction Information\nnone\n\nExample\nlocal body = GetPlayerGrabBody()\nif body ~= 0 then\n\t...\nend\n\nAPI 0.7.0"
    },
    "GetPlayerPickShape": {
        "scope": "lua",
        "body": "GetPlayerPickShape()",
        "prefix": "GetPlayerPickShape",
        "description": "Arguments\nnone\n\nReturn value\nhandle (number) – Handle to picked shape or zero if nothing is picked\n\n\nFunction Information\nnone\n\nExample\nlocal shape = GetPlayerPickShape()\nif shape ~= 0 then\n\t...\nend\n\nAPI 0.7.0"
    },
    "GetPlayerPickBody": {
        "scope": "lua",
        "body": "GetPlayerPickBody()",
        "prefix": "GetPlayerPickBody",
        "description": "Arguments\nnone\n\nReturn value\nhandle (number) – Handle to picked body or zero if nothing is picked\n\n\nFunction Information\nnone\n\nExample\nlocal body = GetPlayerPickBody()\nif body ~= 0 then\n\t...\nend\n\nAPI 0.7.0"
    },
    "GetPlayerInteractShape": {
        "scope": "lua",
        "body": "GetPlayerInteractShape()",
        "prefix": "GetPlayerInteractShape",
        "description": "Arguments\nnone\n\nReturn value\nhandle (number) – Handle to interactable shape or zero\n\n\nFunction Information\nInteractable shapes has to be tagged with \"interact\". The engine determines which interactable shape is currently interactable.\n\nExample\nlocal shape = GetPlayerInteractShape()\nif shape ~= 0 then\n\t...\nend\n\nAPI 0.7.0"
    },
    "GetPlayerInteractBody": {
        "scope": "lua",
        "body": "GetPlayerInteractBody()",
        "prefix": "GetPlayerInteractBody",
        "description": "Arguments\nnone\n\nReturn value\nhandle (number) – Handle to interactable body or zero\n\n\nFunction Information\nInteractable shapes has to be tagged with \"interact\". The engine determines which interactable body is currently interactable.\n\nExample\nlocal body = GetPlayerInteractBody()\nif body ~= 0 then\n\t...\nend\n\nAPI 0.7.0"
    },
    "SetPlayerScreen": {
        "scope": "lua",
        "body": "SetPlayerScreen(${handle})",
        "prefix": "SetPlayerScreen",
        "description": "Arguments\nhandle (number) – Handle to screen or zero for no screen\n\n\nReturn value\nnone\n\nFunction Information\nSet the screen the player should interact with. For the screen to feature a mouse pointer and receieve input, the screen also needs to have interactive property.\n\nExample\n--Interact with screen\nSetPlayerScreen(screen)\n\n--Do not interact with screen\nSetPlayerScreen(0)\n\nAPI 0.7.0"
    },
    "GetPlayerScreen": {
        "scope": "lua",
        "body": "GetPlayerScreen()",
        "prefix": "GetPlayerScreen",
        "description": "Arguments\nnone\n\nReturn value\nhandle (number) – Handle to interacted screen or zero if none\n\n\nFunction Information\nnone\n\nExample\n--Interact with screen\nlocal screen = GetPlayerScreen()\n\nAPI 0.7.0"
    },
    "SetPlayerHealth": {
        "scope": "lua",
        "body": "SetPlayerHealth(${health},health)",
        "prefix": "SetPlayerHealth",
        "description": "Arguments\nhealth (number) – Set player health (between zero and one)\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nSetPlayerHealth(0.5)\n\nAPI 0.7.0"
    },
    "GetPlayerHealth": {
        "scope": "lua",
        "body": "GetPlayerHealth()",
        "prefix": "GetPlayerHealth",
        "description": "Arguments\nnone\n\nReturn value\nhealth (number) – Current player health\n\n\nFunction Information\nnone\n\nExample\nlocal health = GetPlayerHealth()\n\nAPI 0.7.0"
    },
    "RespawnPlayer": {
        "scope": "lua",
        "body": "RespawnPlayer()",
        "prefix": "RespawnPlayer",
        "description": "Arguments\nnone\n\nReturn value\nnone\n\nFunction Information\nRespawn player at spawn position without modifying the scene\n\nExample\nRespawnPlayer()\n\nAPI 0.7.0"
    },
    "RegisterTool": {
        "scope": "lua",
        "body": "RegisterTool('${id}','${name}','${file}')",
        "prefix": "RegisterTool",
        "description": "Arguments\nid (string) – Tool unique identifier\nname (string) – Tool name to show in hud\nfile (string) – Path to vox file\n\n\nReturn value\nnone\n\nFunction Information\nRegister a custom tool that will show up in the player inventory and can be selected with scroll wheel. Do this only once per tool. You also need to enable the tool in the registry before it can be used.\n\nExample\nfunction init()\n\tRegisterTool(\"lasergun\", \"Laser Gun\", \"MOD/vox/lasergun.vox\")\n\tSetBool(\"game.tool.lasergun.enabled\", true)\nend\n\nfunction tick()\n\tif GetString(\"game.player.tool\") == \"lasergun\" then\n\t\t--Tool is selected. Tool logic goes here.\n\tend\nend\n\nAPI 0.7.0"
    },
    "GetToolBody": {
        "scope": "lua",
        "body": "GetToolBody()",
        "prefix": "GetToolBody",
        "description": "Arguments\nnone\n\nReturn value\nhandle (number) – Handle to currently visible tool body or zero if none\n\n\nFunction Information\nReturn body handle of the visible tool. You can use this to retrieve tool shapes and animate them, change emissiveness, etc. Do not attempt to set the tool body transform, since it is controlled by the engine. Use SetToolTranform for that.\n\nExample\nlocal toolBody = GetToolBody()\nif toolBody~=0 then\n\t...\nend\n\nAPI 0.7.0"
    },
    "SetToolTransform": {
        "scope": "lua",
        "body": "SetToolTransform((${transform}),${sway})",
        "prefix": "SetToolTransform",
        "description": "Arguments\ntransform (table) – Tool body transform\nsway (number) – Tool sway amount. Default is 1.0.\n\n\nReturn value\nnone\n\nFunction Information\nApply an additional transform on the visible tool body. This can be used to create tool animations. You need to set this every frame from the tick function. The optional sway parameter control the amount of tool swaying when walking. Set to zero to disable completely.\n\nExample\n--Offset the tool half a meter to the right\nlocal offset = Transform(Vec(0.5, 0, 0))\nSetToolTransform(offset)\n\nAPI 0.7.0"
    },
    "LoadSound": {
        "scope": "lua",
        "body": "LoadSound('${path}')",
        "prefix": "LoadSound",
        "description": "Arguments\npath (string) – Path to ogg sound file\n\n\nReturn value\nhandle (number) – Sound handle\n\n\nFunction Information\nnone\n\nExample\nlocal snd = LoadSound(\"beep.ogg\")\n\nAPI 0.7.0"
    },
    "LoadLoop": {
        "scope": "lua",
        "body": "LoadLoop('${path}')",
        "prefix": "LoadLoop",
        "description": "Arguments\npath (string) – Path to ogg sound file\n\n\nReturn value\nhandle (number) – Loop handle\n\n\nFunction Information\nnone\n\nExample\nlocal loop = LoadLoop(\"siren.ogg\")\n\nAPI 0.7.0"
    },
    "PlaySound": {
        "scope": "lua",
        "body": "PlaySound(${handle},pos,volume)",
        "prefix": "PlaySound",
        "description": "Arguments\nhandle (number) – Sound handle\npos (table, optional) – World position as vector. Default is player position.\nvolume (number, optional) – Playback volume. Default is 1.0\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nfunction init()\n\tsnd = LoadSound(\"beep.ogg\")\nend\n\nfunction tick()\n\tif trigSound then\n\t\tlocal pos = Vec(100, 0, 0)\n\t\tPlaySound(snd, pos, 0.5)\n\tend\nend\n\nAPI 0.7.0"
    },
    "PlayLoop": {
        "scope": "lua",
        "body": "PlayLoop(${handle},pos,volume)",
        "prefix": "PlayLoop",
        "description": "Arguments\nhandle (number) – Loop handle\npos (table, optional) – World position as vector. Default is player position.\nvolume (number, optional) – Playback volume. Default is 1.0\n\n\nReturn value\nnone\n\nFunction Information\nCall this function continuously to play loop\n\nExample\nfunction init()\n\tloop = LoadLoop(\"siren.ogg\")\nend\n\nfunction tick()\n\tlocal pos = Vec(100, 0, 0)\n\tPlayLoop(loop, pos, 0.5)\nend\n\nAPI 0.7.0"
    },
    "PlayMusic": {
        "scope": "lua",
        "body": "PlayMusic('${path}')",
        "prefix": "PlayMusic",
        "description": "Arguments\npath (string) – Music path\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nPlayMusic(\"MOD/music/background.ogg\")\n\nAPI 0.7.0"
    },
    "StopMusic": {
        "scope": "lua",
        "body": "StopMusic()",
        "prefix": "StopMusic",
        "description": "Arguments\nnone\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nStopMusic()\n\nAPI 0.7.0"
    },
    "LoadSprite": {
        "scope": "lua",
        "body": "LoadSprite('${path}')",
        "prefix": "LoadSprite",
        "description": "Arguments\npath (string) – Path to sprite. Must be PNG or JPG format.\n\n\nReturn value\nhandle (number) – Sprite handle\n\n\nFunction Information\nnone\n\nExample\nfunction init()\n\tarrow = LoadSprite(\"arrow.png\")\nend\n\nAPI 0.7.0"
    },
    "DrawSprite": {
        "scope": "lua",
        "body": "DrawSprite(${handle},(${transform}),${width},${height},${r},${g},${b},${a},depthTest,additive)",
        "prefix": "DrawSprite",
        "description": "Arguments\nhandle (number) – Sprite handle\ntransform (table) – Transform\nwidth (number) – Width in meters\nheight (number) – Height in meters\nr (number) – Red color\ng (number) – Green color\nb (number) – Blue color\na (number) – Alpha\ndepthTest (boolean, optional) – Depth test enabled. Default false.\nadditive (boolean, optional) – Additive blending enabled. Default false.\n\n\nReturn value\nnone\n\nFunction Information\nDraw sprite in world at next frame. Call this function from the tick callback.\n\nExample\nfunction init()\n\tarrow = LoadSprite(\"arrow.png\")\nend\n\nfunction tick()\n\t--Draw sprite using transform\n\t--Size is two meters in width and height\n\t--Color is white, fully opaue\n\tlocal t = Transform(Vec(0, 10, 0), QuatEuler(0, GetTime(), 0))\n\tDrawSprite(arrow, t, 2, 2, 1, 1, 1, 1)\nend\n\nAPI 0.7.0"
    },
    "QueryRequire": {
        "scope": "lua",
        "body": "QueryRequire('${layers}')",
        "prefix": "QueryRequire",
        "description": "Arguments\nlayers (string) – Space separate list of layers\n\n\nReturn value\nnone\n\nFunction Information\nSet required layers for next query. Available layers are:\n\nExample\n--Raycast dynamic, physical objects above debris threshold, but not specific vehicle\nQueryRequire(\"physical dynamic large\")\nQueryRejectVehicle(vehicle)\nQueryRaycast(...)\n\nAPI 0.7.0"
    },
    "QueryRejectVehicle": {
        "scope": "lua",
        "body": "QueryRejectVehicle(${vehicle})",
        "prefix": "QueryRejectVehicle",
        "description": "Arguments\nvehicle (number) – Vehicle handle\n\n\nReturn value\nnone\n\nFunction Information\nExclude vehicle from the next query\n\nExample\n--Do not include vehicle in next raycast\nQueryRejectVehicle(vehicle)\nQueryRaycast(...)\n\nAPI 0.7.0"
    },
    "QueryRejectBody": {
        "scope": "lua",
        "body": "QueryRejectBody(${body})",
        "prefix": "QueryRejectBody",
        "description": "Arguments\nbody (number) – Body handle\n\n\nReturn value\nnone\n\nFunction Information\nExclude body from the next query\n\nExample\n--Do not include body in next raycast\nQueryRejectBody(body)\nQueryRaycast(...)\n\nAPI 0.7.0"
    },
    "QueryRejectShape": {
        "scope": "lua",
        "body": "QueryRejectShape(${shape})",
        "prefix": "QueryRejectShape",
        "description": "Arguments\nshape (number) – Shape handle\n\n\nReturn value\nnone\n\nFunction Information\nExclude shape from the next query\n\nExample\n--Do not include shape in next raycast\nQueryRejectShape(shape)\nQueryRaycast(...)\n\nAPI 0.7.0"
    },
    "QueryRaycast": {
        "scope": "lua",
        "body": "QueryRaycast((${origin}),(${direction}),${maxDist},radius,rejectTransparent)",
        "prefix": "QueryRaycast",
        "description": "Arguments\norigin (table) – Raycast origin as world space vector\ndirection (table) – Unit length raycast direction as world space vector\nmaxDist (number) – Raycast maximum distance. Keep this as low as possible for good performance.\nradius (number, optional) – Raycast thickness. Default zero.\nrejectTransparent (boolean, optional) – Raycast through transparent materials. Default false.\n\n\nReturn value\nhit (boolean) – True if raycast hit something\ndist (number) – Hit distance from origin\nnormal (table) – World space normal at hit point\nshape (number) – Handle to hit shape\n\n\nFunction Information\nThis will perform a raycast or spherecast (if radius is more than zero) query. If you want to set up a filter for the query you need to do so before every call to this function.\n\nExample\n--Raycast from a high point straight downwards, excluding a specific vehicle\nQueryRejectVehicle(vehicle)\nlocal hit, d = QueryRaycast(Vec(0, 100, 0), Vec(0, -1, 0), 100)\nif hit then\n\t...hit something at distance d\nend\n\nAPI 0.7.0"
    },
    "QueryClosestPoint": {
        "scope": "lua",
        "body": "QueryClosestPoint((${origin}),${maxDist})",
        "prefix": "QueryClosestPoint",
        "description": "Arguments\norigin (table) – World space point\nmaxDist (number) – Maximum distance. Keep this as low as possible for good performance.\n\n\nReturn value\nhit (boolean) – True if a point was found\npoint (table) – World space closest point\nnormal (table) – World space normal at closest point\nshape (number) – Handle to closest shape\n\n\nFunction Information\nThis will query the closest point to all shapes in the world. If you want to set up a filter for the query you need to do so before every call to this function.\n\nExample\n--Find closest point within 10 meters of {0, 5, 0}, excluding any point on myVehicle\nQueryRejectVehicle(myVehicle)\nlocal hit, p, n, s = QueryClosestPoint(Vec(0, 5, 0), 10)\nif hit then\n\t--Point p of shape s is closest\nend\n\nAPI 0.7.0"
    },
    "QueryAabbShapes": {
        "scope": "lua",
        "body": "QueryAabbShapes((${min}),(${max}))",
        "prefix": "QueryAabbShapes",
        "description": "Arguments\nmin (table) – Aabb minimum point\nmax (table) – Aabb maximum point\n\n\nReturn value\nlist (table) – Indexed table with handles to all shapes in the aabb\n\n\nFunction Information\nReturn all shapes within the provided world space, axis-aligned bounding box\n\nExample\nlocal list = QueryAabbShapes(Vec(0, 0, 0), Vec(10, 10, 10))\nfor i=1, #list do\n\tlocal shape = list[i]\n\t..\nend\n\nAPI 0.7.0"
    },
    "QueryAabbBodies": {
        "scope": "lua",
        "body": "QueryAabbBodies((${min}),(${max}))",
        "prefix": "QueryAabbBodies",
        "description": "Arguments\nmin (table) – Aabb minimum point\nmax (table) – Aabb maximum point\n\n\nReturn value\nlist (table) – Indexed table with handles to all bodies in the aabb\n\n\nFunction Information\nReturn all bodies within the provided world space, axis-aligned bounding box\n\nExample\nlocal list = QueryAabbBodies(Vec(0, 0, 0), Vec(10, 10, 10))\nfor i=1, #list do\n\tlocal body = list[i]\n\t..\nend\n\nAPI 0.7.0"
    },
    "GetLastSound": {
        "scope": "lua",
        "body": "GetLastSound()",
        "prefix": "GetLastSound",
        "description": "Arguments\nnone\n\nReturn value\nvolume (number) – Volume of loudest sound played last frame\nposition (table) – World position of loudest sound played last frame\n\n\nFunction Information\nnone\n\nExample\nlocal vol, pos = GetLastSound()\n\nAPI 0.7.0"
    },
    "IsPointInWater": {
        "scope": "lua",
        "body": "IsPointInWater((${point}))",
        "prefix": "IsPointInWater",
        "description": "Arguments\npoint (table) – World point as vector\n\n\nReturn value\ninWater (boolean) – True if point is in water\ndepth (number) – Depth of point into water, or zero if not in water\n\n\nFunction Information\nnone\n\nExample\nlocal wet, d = IsPointInWater(Vec(10, 0, 0))\nif wet then\n\t...point d meters into water\nend\n\nAPI 0.7.0"
    },
    "ParticleReset": {
        "scope": "lua",
        "body": "ParticleReset()",
        "prefix": "ParticleReset",
        "description": "Arguments\nnone\n\nReturn value\nnone\n\nFunction Information\nReset to default particle state, which is a plain, white particle of radius 0.5. Collision is enabled and it alpha animates from 1 to 0.\n\nExample\nParticleReset()\n\nAPI 0.7.0"
    },
    "ParticleType": {
        "scope": "lua",
        "body": "ParticleType('${type}')",
        "prefix": "ParticleType",
        "description": "Arguments\ntype (string) – Type of particle. Can be \"smoke\" or \"plain\".\n\n\nReturn value\nnone\n\nFunction Information\nSet type of particle\n\nExample\nParticleType(\"smoke\")\n\nAPI 0.7.0"
    },
    "ParticleTile": {
        "scope": "lua",
        "body": "ParticleTile(type,atlas)",
        "prefix": "ParticleTile",
        "description": "Arguments\ntype (int) – Tile in the particle texture atlas (0-15)\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\n--Smoke particle\nParticleTile(0)\n\n--Fire particle\nParticleTile(5)\n\nAPI 0.7.0"
    },
    "ParticleColor": {
        "scope": "lua",
        "body": "ParticleColor(r0,g0,b0,r1,g1,b1)",
        "prefix": "ParticleColor",
        "description": "Arguments\nr0 (float) – Red value\ng0 (float) – Green value\nb0 (float) – Blue value\nr1 (float, optional) – Red value at end\ng1 (float, optional) – Green value at end\nb1 (float, optional) – Blue value at end\n\n\nReturn value\nnone\n\nFunction Information\nSet particle color to either constant (three arguments) or linear interpolation (six arguments)\n\nExample\n--Constant red\nParticleColor(1,0,0)\n\n--Animating from yellow to red\nParticleColor(1,1,0, 1,0,0)\n\nAPI 0.7.0"
    },
    "ParticleRadius": {
        "scope": "lua",
        "body": "ParticleRadius(r0,r1,interpolation,fadein,fadeout)",
        "prefix": "ParticleRadius",
        "description": "Arguments\nr0 (float) – Radius\nr1 (float, optional) – End radius\ninterpolation (string, optional) – Interpolation method: linear, smooth, easein, easeout or constant. Default is linear.\nfadein (float, optional) – Fade in between t=0 and t=fadein. Default is zero.\nfadeout (float, optional) – Fade out between t=fadeout and t=1. Default is one.\n\n\nReturn value\nnone\n\nFunction Information\nSet the particle radius. Max radius for smoke particles is 1.0.\n\nExample\n--Constant radius 0.4 meters\nParticleRadius(0.4)\n\n--Interpolate from small to large\nParticleRadius(0.1, 0.7)\n\nAPI 0.7.0"
    },
    "ParticleAlpha": {
        "scope": "lua",
        "body": "ParticleAlpha(a0,Alpha,a1,alpha,interpolation,fadein,fadeout)",
        "prefix": "ParticleAlpha",
        "description": "Arguments\na0 (float) – Alpha (0.0 - 1.0)\na1 (float, optional) – End alpha (0.0 - 1.0)\ninterpolation (string, optional) – Interpolation method: linear, smooth, easein, easeout or constant. Default is linear.\nfadein (float, optional) – Fade in between t=0 and t=fadein. Default is zero.\nfadeout (float, optional) – Fade out between t=fadeout and t=1. Default is one.\n\n\nReturn value\nnone\n\nFunction Information\nSet the particle alpha (opacity).\n\nExample\n--Interpolate from opaque to transparent\nParticleAlpha(1.0, 0.0)\n\nAPI 0.7.0"
    },
    "ParticleGravity": {
        "scope": "lua",
        "body": "ParticleGravity(g0,g1,interpolation,fadein,fadeout)",
        "prefix": "ParticleGravity",
        "description": "Arguments\ng0 (float) – Gravity\ng1 (float, optional) – End gravity\ninterpolation (string, optional) – Interpolation method: linear, smooth, easein, easeout or constant. Default is linear.\nfadein (float, optional) – Fade in between t=0 and t=fadein. Default is zero.\nfadeout (float, optional) – Fade out between t=fadeout and t=1. Default is one.\n\n\nReturn value\nnone\n\nFunction Information\nSet particle gravity. It will be applied along the world Y axis. A negative value will move the particle downwards.\n\nExample\n--Move particles slowly upwards\nParticleGravity(2)\n\nAPI 0.7.0"
    },
    "ParticleDrag": {
        "scope": "lua",
        "body": "ParticleDrag(d0,d1,interpolation,fadein,fadeout)",
        "prefix": "ParticleDrag",
        "description": "Arguments\nd0 (float) – Drag\nd1 (float, optional) – End drag\ninterpolation (string, optional) – Interpolation method: linear, smooth, easein, easeout or constant. Default is linear.\nfadein (float, optional) – Fade in between t=0 and t=fadein. Default is zero.\nfadeout (float, optional) – Fade out between t=fadeout and t=1. Default is one.\n\n\nReturn value\nnone\n\nFunction Information\nParticle drag will slow down fast moving particles. It's implemented slightly different for smoke and plain particles. Drag must be positive, and usually look good between zero and one.\n\nExample\n--Sow down fast moving particles\nParticleDrag(0.5)\n\nAPI 0.7.0"
    },
    "ParticleEmissive": {
        "scope": "lua",
        "body": "ParticleEmissive(d0,d1,interpolation,fadein,fadeout)",
        "prefix": "ParticleEmissive",
        "description": "Arguments\nd0 (float) – Emissive\nd1 (float, optional) – End emissive\ninterpolation (string, optional) – Interpolation method: linear, smooth, easein, easeout or constant. Default is linear.\nfadein (float, optional) – Fade in between t=0 and t=fadein. Default is zero.\nfadeout (float, optional) – Fade out between t=fadeout and t=1. Default is one.\n\n\nReturn value\nnone\n\nFunction Information\nDraw particle as emissive (glow in the dark). This is useful for fire and embers.\n\nExample\n--Highly emissive at start, not emissive at end\nParticleEmissive(5, 0)\n\nAPI 0.7.0"
    },
    "ParticleRotation": {
        "scope": "lua",
        "body": "ParticleRotation(r0,r1,interpolation,fadein,fadeout)",
        "prefix": "ParticleRotation",
        "description": "Arguments\nr0 (float) – Rotation speed in radians per second.\nr1 (float, optional) – End rotation speed in radians per second.\ninterpolation (string, optional) – Interpolation method: linear, smooth, easein, easeout or constant. Default is linear.\nfadein (float, optional) – Fade in between t=0 and t=fadein. Default is zero.\nfadeout (float, optional) – Fade out between t=fadeout and t=1. Default is one.\n\n\nReturn value\nnone\n\nFunction Information\nMakes the particle rotate. Positive values is counter-clockwise rotation.\n\nExample\n--Rotate fast at start and slow at end\nParticleEmissive(10, 1)\n\nAPI 0.7.0"
    },
    "ParticleStretch": {
        "scope": "lua",
        "body": "ParticleStretch(s0,s1,interpolation,fadein,fadeout)",
        "prefix": "ParticleStretch",
        "description": "Arguments\ns0 (float) – Stretch\ns1 (float, optional) – End stretch\ninterpolation (string, optional) – Interpolation method: linear, smooth, easein, easeout or constant. Default is linear.\nfadein (float, optional) – Fade in between t=0 and t=fadein. Default is zero.\nfadeout (float, optional) – Fade out between t=fadeout and t=1. Default is one.\n\n\nReturn value\nnone\n\nFunction Information\nStretch particle along with velocity. 0.0 means no stretching. 1.0 stretches with the particle motion over one frame. Larger values stretches the particle even more.\n\nExample\n--Stretch particle along direction of motion\nParticleStretch(1.0)\n\nAPI 0.7.0"
    },
    "ParticleSticky": {
        "scope": "lua",
        "body": "ParticleSticky(s0,Sticky,s1,sticky,interpolation,fadein,fadeout)",
        "prefix": "ParticleSticky",
        "description": "Arguments\ns0 (float) – Sticky (0.0 - 1.0)\ns1 (float, optional) – End sticky (0.0 - 1.0)\ninterpolation (string, optional) – Interpolation method: linear, smooth, easein, easeout or constant. Default is linear.\nfadein (float, optional) – Fade in between t=0 and t=fadein. Default is zero.\nfadeout (float, optional) – Fade out between t=fadeout and t=1. Default is one.\n\n\nReturn value\nnone\n\nFunction Information\nMake particle stick when in contact with objects. This can be used for friction.\n\nExample\n--Make particles stick to objects\nParticleSticky(0.5)\n\nAPI 0.7.0"
    },
    "ParticleCollide": {
        "scope": "lua",
        "body": "ParticleCollide(c0,Collide,c1,collide,interpolation,fadein,fadeout)",
        "prefix": "ParticleCollide",
        "description": "Arguments\nc0 (float) – Collide (0.0 - 1.0)\nc1 (float, optional) – End collide (0.0 - 1.0)\ninterpolation (string, optional) – Interpolation method: linear, smooth, easein, easeout or constant. Default is linear.\nfadein (float, optional) – Fade in between t=0 and t=fadein. Default is zero.\nfadeout (float, optional) – Fade out between t=fadeout and t=1. Default is one.\n\n\nReturn value\nnone\n\nFunction Information\nControl particle collisions. A value of zero means that collisions are ignored. One means full collision. It is sometimes useful to animate this value from zero to one in order to not collide with objects around the emitter.\n\nExample\n--Disable collisions\nParticleCollide(0)\n\n--Enable collisions over time\nParticleCollide(0, 1)\n\n--Ramp up collisions very quickly, only skipping the first 5% of lifetime\nParticleCollide(1, 1, \"constant\", 0.05)\n\nAPI 0.7.0"
    },
    "SpawnParticle": {
        "scope": "lua",
        "body": "SpawnParticle((${pos}),(${velocity}),${lifetime})",
        "prefix": "SpawnParticle",
        "description": "Arguments\npos (table) – World space point as vector\nvelocity (table) – World space velocity as vector\nlifetime (number) – Particle lifetime in seconds\n\n\nReturn value\nnone\n\nFunction Information\nSpawn particle using the previously set up particle state. You can call this multiple times using the same particle state, but with different position, velocity and lifetime. You can also modify individual properties in the particle state in between calls to to this function.\n\nExample\nParticleReset()\nParticleType(\"smoke\")\nParticleColor(0.7, 0.6, 0.5)\n--Spawn particle at world origo with upwards velocity and a lifetime of ten seconds\nSpawnParticle(Vec(0, 0, 0), Vec(0, 1, 0), 10.0)\n\nAPI 0.7.0"
    },
    "Shoot": {
        "scope": "lua",
        "body": "Shoot((${origin}),(${direction}),type,bullet)",
        "prefix": "Shoot",
        "description": "Arguments\norigin (table) – Origin in world space as vector\ndirection (table) – Unit length direction as world space vector\ntype (number, optional) – 0 is regular bullet (default) and 1 is rocket\n\n\nReturn value\nnone\n\nFunction Information\nShoot bullet or rocket (used for chopper)\n\nExample\nShoot(Vec(0, 10, 0), Vec(0, 0, 1))\n\nAPI 0.7.0"
    },
    "MakeHole": {
        "scope": "lua",
        "body": "MakeHole((${position}),${r0},r1,r2,silent)",
        "prefix": "MakeHole",
        "description": "Arguments\nposition (table) – Hole center point\nr0 (number) – Hole radius for soft materials\nr1 (number, optional) – Hole radius for medium materials. May not be bigger than r0. Default zero.\nr2 (number, optional) – Hole radius for hard materials. May not be bigger than r1. Default zero.\nsilent (boolean, optional) – Make hole without playing any break sounds.\n\n\nReturn value\nnone\n\nFunction Information\nMake a hole in the environment. Radius is given in meters. Soft materials: glass, foliage, dirt, wood, plaster and plastic. Medium materials: concrete, brick and weak metal. Hard materials: hard metal and hard masonry.\n\nExample\nMakeHole(pos, 1.2, 1.0)\n\nAPI 0.7.0"
    },
    "Explosion": {
        "scope": "lua",
        "body": "Explosion((${pos}),${size})",
        "prefix": "Explosion",
        "description": "Arguments\npos (table) – Position in world space as vector\nsize (number) – Explosion size from 0.5 to 4.0\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nExplosion(Vec(0, 10, 0), 1)\n\nAPI 0.7.0"
    },
    "SpawnFire": {
        "scope": "lua",
        "body": "SpawnFire((${pos}))",
        "prefix": "SpawnFire",
        "description": "Arguments\npos (table) – Position in world space as vector\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nSpawnFire(Vec(0, 10, 0))\n\nAPI 0.7.0"
    },
    "GetFireCount": {
        "scope": "lua",
        "body": "GetFireCount()",
        "prefix": "GetFireCount",
        "description": "Arguments\nnone\n\nReturn value\ncount (number) – Number of active fires in level\n\n\nFunction Information\nnone\n\nExample\nlocal c = GetFireCount()\n\nAPI 0.7.0"
    },
    "GetCameraTransform": {
        "scope": "lua",
        "body": "GetCameraTransform()",
        "prefix": "GetCameraTransform",
        "description": "Arguments\nnone\n\nReturn value\ntransform (table) – Current camera transform\n\n\nFunction Information\nnone\n\nExample\nlocal t = GetCameraTransform()\n\nAPI 0.7.0"
    },
    "SetCameraTransform": {
        "scope": "lua",
        "body": "SetCameraTransform((${transform}),fov,degrees)",
        "prefix": "SetCameraTransform",
        "description": "Arguments\ntransform (table) – Desired camera transform\nfov (number, optional) – Optional horizontal field of view in degrees (default: 90)\n\n\nReturn value\nnone\n\nFunction Information\nOverride current camera transform for this frame. Call continuously to keep overriding.\n\nExample\nSetCameraTransform(Transform(Vec(0, 10, 0), QuatEuler(0, 90, 0)))\n\nAPI 0.7.0"
    },
    "SetCameraFov": {
        "scope": "lua",
        "body": "SetCameraFov(${float},degrees)",
        "prefix": "SetCameraFov",
        "description": "Arguments\nfloat (number) – Horizontal field of view in degrees (10-170)\n\n\nReturn value\nnone\n\nFunction Information\nOverride field of view for the next frame for all camera modes, except when explicitly set in SetCameraTransform\n\nExample\nfunction tick()\n\tSetCameraFov(60)\nend\n\nAPI 0.7.0"
    },
    "PointLight": {
        "scope": "lua",
        "body": "PointLight((${pos}),${r},${g},${b},intensity)",
        "prefix": "PointLight",
        "description": "Arguments\npos (table) – World space light position\nr (number) – Red\ng (number) – Green\nb (number) – Blue\nintensity (number, optional) – Intensity. Default is 1.0.\n\n\nReturn value\nnone\n\nFunction Information\nAdd a temporary point light to the world for this frame. Call continuously for a steady light.\n\nExample\n--Pulsating, yellow light above world origo\nlocal intensity = 3 + math.sin(GetTime())\nPointLight(Vec(0, 5, 0), 1, 1, 0, intensity)\n\nAPI 0.7.0"
    },
    "SetTimeScale": {
        "scope": "lua",
        "body": "SetTimeScale(${scale})",
        "prefix": "SetTimeScale",
        "description": "Arguments\nscale (number) – Time scale 0.1 to 1.0\n\n\nReturn value\nnone\n\nFunction Information\nExperimental. Scale time in order to make a slow-motion effect. Audio will also be affected. Note that this will affect physics behavior and is not intended for gameplay purposes. Calling this function will slow down time for the next frame only. Call every frame from tick function to get steady slow-motion.\n\nExample\n--Slow down time when holding down a key\nif InputDown('t') then\n\tSetTimeScale(0.2)\nend\n\nAPI 0.7.0"
    },
    "DrawLine": {
        "scope": "lua",
        "body": "DrawLine((${p0}),(${p1}),r,g,b,a)",
        "prefix": "DrawLine",
        "description": "Arguments\np0 (table) – World space point as vector\np1 (table) – World space point as vector\nr (number, optional) – Red\ng (number, optional) – Green\nb (number, optional) – Blue\na (number, optional) – Alpha\n\n\nReturn value\nnone\n\nFunction Information\nDraw a 3D line. In contrast to DebugLine, it will not show behind objects. Default color is white.\n\nExample\n--Draw white debug line\nDrawLine(Vec(0, 0, 0), Vec(-10, 5, -10))\n\n--Draw red debug line\nDrawLine(Vec(0, 0, 0), Vec(10, 5, 10), 1, 0, 0)\n\nAPI 0.7.0"
    },
    "DebugLine": {
        "scope": "lua",
        "body": "DebugLine((${p0}),(${p1}),r,g,b,a)",
        "prefix": "DebugLine",
        "description": "Arguments\np0 (table) – World space point as vector\np1 (table) – World space point as vector\nr (number, optional) – Red\ng (number, optional) – Green\nb (number, optional) – Blue\na (number, optional) – Alpha\n\n\nReturn value\nnone\n\nFunction Information\nDraw a 3D debug overlay line in the world. Default color is white.\n\nExample\n--Draw white debug line\nDebugLine(Vec(0, 0, 0), Vec(-10, 5, -10))\n\n--Draw red debug line\nDebugLine(Vec(0, 0, 0), Vec(10, 5, 10), 1, 0, 0)\n\nAPI 0.7.0"
    },
    "DebugCross": {
        "scope": "lua",
        "body": "DebugCross((${p0}),r,g,b,a)",
        "prefix": "DebugCross",
        "description": "Arguments\np0 (table) – World space point as vector\nr (number, optional) – Red\ng (number, optional) – Green\nb (number, optional) – Blue\na (number, optional) – Alpha\n\n\nReturn value\nnone\n\nFunction Information\nDraw a debug cross in the world to highlight a location. Default color is white.\n\nExample\nDebugCross(Vec(10, 5, 5))\n\nAPI 0.7.0"
    },
    "DebugWatch": {
        "scope": "lua",
        "body": "DebugWatch('${name}','${value}')",
        "prefix": "DebugWatch",
        "description": "Arguments\nname (string) – Name\nvalue (string) – Value\n\n\nReturn value\nnone\n\nFunction Information\nShow a named valued on screen for debug purposes. Up to 32 values can be shown simultaneously. Values updated the current frame are drawn opaque. Old values are drawn transparent in white.\n\nExample\nlocal t = 5\nDebugWatch(\"time\", t)\n\nAPI 0.7.0"
    },
    "DebugPrint": {
        "scope": "lua",
        "body": "DebugPrint('${message}')",
        "prefix": "DebugPrint",
        "description": "Arguments\nmessage (string) – Message to display\n\n\nReturn value\nnone\n\nFunction Information\nDisplay message on screen. The last 20 lines are displayed.\n\nExample\nDebugPrint(\"time\")\n\nAPI 0.7.0"
    },
    "UiMakeInteractive": {
        "scope": "lua",
        "body": "UiMakeInteractive()",
        "prefix": "UiMakeInteractive",
        "description": "Arguments\nnone\n\nReturn value\nnone\n\nFunction Information\nCalling this function will disable game input, bring up the mouse pointer and allow Ui interaction with the calling script without pausing the game. This can be useful to make interactive user interfaces from scripts while the game is running. Call this continuously every frame as long as Ui interaction is desired.\n\nExample\nUiMakeInteractive()\n\nAPI 0.7.0"
    },
    "UiPush": {
        "scope": "lua",
        "body": "UiPush()",
        "prefix": "UiPush",
        "description": "Arguments\nnone\n\nReturn value\nnone\n\nFunction Information\nPush state onto stack. This is used in combination with UiPop to remember a state and restore to that state later.\n\nExample\nUiColor(1,0,0)\nUiText(\"Red\")\nUiPush()\n\tUiColor(0,1,0)\n\tUiText(\"Green\")\nUiPop()\nUiText(\"Red\")\n\nAPI 0.7.0"
    },
    "UiPop": {
        "scope": "lua",
        "body": "UiPop()",
        "prefix": "UiPop",
        "description": "Arguments\nnone\n\nReturn value\nnone\n\nFunction Information\nPop state from stack and make it the current one. This is used in combination with UiPush to remember a previous state and go back to it later.\n\nExample\nUiColor(1,0,0)\nUiText(\"Red\")\nUiPush()\n\tUiColor(0,1,0)\n\tUiText(\"Green\")\nUiPop()\nUiText(\"Red\")\n\nAPI 0.7.0"
    },
    "UiWidth": {
        "scope": "lua",
        "body": "UiWidth()",
        "prefix": "UiWidth",
        "description": "Arguments\nnone\n\nReturn value\nwidth (number) – Width of draw context\n\n\nFunction Information\nnone\n\nExample\nlocal w = UiWidth()\n\nAPI 0.7.0"
    },
    "UiHeight": {
        "scope": "lua",
        "body": "UiHeight()",
        "prefix": "UiHeight",
        "description": "Arguments\nnone\n\nReturn value\nheight (number) – Height of draw context\n\n\nFunction Information\nnone\n\nExample\nlocal h = UiHeight()\n\nAPI 0.7.0"
    },
    "UiCenter": {
        "scope": "lua",
        "body": "UiCenter()",
        "prefix": "UiCenter",
        "description": "Arguments\nnone\n\nReturn value\ncenter (number) – Half width of draw context\n\n\nFunction Information\nnone\n\nExample\nlocal c = UiCenter()\n--Same as \nlocal c = UiWidth()/2\n\nAPI 0.7.0"
    },
    "UiMiddle": {
        "scope": "lua",
        "body": "UiMiddle()",
        "prefix": "UiMiddle",
        "description": "Arguments\nnone\n\nReturn value\nmiddle (number) – Half height of draw context\n\n\nFunction Information\nnone\n\nExample\nlocal m = UiMiddle()\n--Same as\nlocal m = UiHeight()/2\n\nAPI 0.7.0"
    },
    "UiColor": {
        "scope": "lua",
        "body": "UiColor(${r},${g},${b},a)",
        "prefix": "UiColor",
        "description": "Arguments\nr (number) – Red channel\ng (number) – Green channel\nb (number) – Blue channel\na (number, optional) – Alpha channel. Default 1.0\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\n--Set color yellow\nUiColor(1,1,0)\n\nAPI 0.7.0"
    },
    "UiColorFilter": {
        "scope": "lua",
        "body": "UiColorFilter(${r},${g},${b},a)",
        "prefix": "UiColorFilter",
        "description": "Arguments\nr (number) – Red channel\ng (number) – Green channel\nb (number) – Blue channel\na (number, optional) – Alpha channel. Default 1.0\n\n\nReturn value\nnone\n\nFunction Information\nColor filter, multiplied to all future colors in this scope\n\nExample\nUiPush()\n\t--Draw menu in transparent, yellow color tint\n\tUiColorFilter(1, 1, 0, 0.5)\n\tdrawMenu()\nUiPop()\n\nAPI 0.7.0"
    },
    "UiTranslate": {
        "scope": "lua",
        "body": "UiTranslate(${x},${y})",
        "prefix": "UiTranslate",
        "description": "Arguments\nx (number) – X component\ny (number) – Y component\n\n\nReturn value\nnone\n\nFunction Information\nTranslate cursor\n\nExample\nUiPush()\n\tUiTranslate(100, 0)\n\tUiText(\"Indented\")\nUiPop()\n\nAPI 0.7.0"
    },
    "UiRotate": {
        "scope": "lua",
        "body": "UiRotate(${angle})",
        "prefix": "UiRotate",
        "description": "Arguments\nangle (number) – Angle in degrees, counter clockwise\n\n\nReturn value\nnone\n\nFunction Information\nRotate cursor\n\nExample\nUiPush()\n\tUiRotate(45)\n\tUiText(\"Rotated\")\nUiPop()\n\nAPI 0.7.0"
    },
    "UiScale": {
        "scope": "lua",
        "body": "UiScale(${x},y)",
        "prefix": "UiScale",
        "description": "Arguments\nx (number) – X component\ny (number, optional) – Y component. Default value is x.\n\n\nReturn value\nnone\n\nFunction Information\nScale cursor either uniformly (one argument) or non-uniformly (two arguments)\n\nExample\nUiPush()\n\tUiScale(2)\n\tUiText(\"Double size\")\nUiPop()\n\nAPI 0.7.0"
    },
    "UiWindow": {
        "scope": "lua",
        "body": "UiWindow(${width},${height},clip)",
        "prefix": "UiWindow",
        "description": "Arguments\nwidth (number) – Window width\nheight (number) – Window height\nclip (boolean, optional) – Clip content outside window. Default is false.\n\n\nReturn value\nnone\n\nFunction Information\nSet up new bounds. Calls to UiWidth, UiHeight, UiCenter and UiMiddle will operate in the context of the window size. If clip is set to true, contents of window will be clipped to bounds (only works properly for non-rotated windows).\n\nExample\nUiPush()\n\tUiWindow(400, 200)\n\tlocal w = UiWidth()\n\t--w is now 400\nUiPop()\n\nAPI 0.7.0"
    },
    "UiSafeMargins": {
        "scope": "lua",
        "body": "UiSafeMargins()",
        "prefix": "UiSafeMargins",
        "description": "Arguments\nnone\n\nReturn value\nx0 (number) – Left\ny0 (number) – Top\nx1 (number) – Right\ny1 (number) – Bottom\n\n\nFunction Information\nReturn a safe drawing area that will always be visible regardless of display aspect ratio. The safe drawing area will always be 1920 by 1080 in size. This is useful for setting up a fixed size UI.\n\nExample\nfunction draw()\n\tlocal x0, y0, x1, y1 = UiSafeMargins()\n\tUiTranslate(x0, y0)\n\tUiWindow(x1-x0, y1-y0, true)\n\t--The drawing area is now 1920 by 1080 in the center of screen\n\tdrawMenu()\nend\n\nAPI 0.7.0"
    },
    "UiAlign": {
        "scope": "lua",
        "body": "UiAlign('${alignment}')",
        "prefix": "UiAlign",
        "description": "Arguments\nalignment (string) – Alignment keywords\n\n\nReturn value\nnone\n\nFunction Information\nThe alignment determines how content is aligned with respect to the cursor.\n\nExample\nUiAlign(\"left\")\nUiText(\"Aligned left at baseline\")\n\nUiAlign(\"center middle\")\nUiText(\"Fully centered\")\n\nAPI 0.7.0"
    },
    "UiModalBegin": {
        "scope": "lua",
        "body": "UiModalBegin()",
        "prefix": "UiModalBegin",
        "description": "Arguments\nnone\n\nReturn value\nnone\n\nFunction Information\nDisable input for everything, except what's between UiModalBegin and UiModalEnd (or if modal state is popped)\n\nExample\nUiModalBegin()\nif UiTextButton(\"Okay\") then\n\t--All other interactive ui elements except this one are disabled\nend\nUiModalEnd()\n\n--This is also okay\nUiPush()\n\tUiModalBegin()\n\tif UiTextButton(\"Okay\") then\n\t\t--All other interactive ui elements except this one are disabled\n\tend\nUiPop()\n--No longer modal\n\nAPI 0.7.0"
    },
    "UiModalEnd": {
        "scope": "lua",
        "body": "UiModalEnd()",
        "prefix": "UiModalEnd",
        "description": "Arguments\nnone\n\nReturn value\nnone\n\nFunction Information\nDisable input for everything, except what's between UiModalBegin and UiModalEnd Calling this function is optional. Modality is part of the current state and will be lost if modal state is popped.\n\nExample\nUiModalBegin()\nif UiTextButton(\"Okay\") then\n\t--All other interactive ui elements except this one are disabled\nend\nUiModalEnd()\n\nAPI 0.7.0"
    },
    "UiDisableInput": {
        "scope": "lua",
        "body": "UiDisableInput()",
        "prefix": "UiDisableInput",
        "description": "Arguments\nnone\n\nReturn value\nnone\n\nFunction Information\nDisable input\n\nExample\nUiPush()\n\tUiDisableInput()\n\tif UiButtonText(\"Okay\") then\n\t\t--Will never happen\n\tend\nUiPop()\n\nAPI 0.7.0"
    },
    "UiEnableInput": {
        "scope": "lua",
        "body": "UiEnableInput()",
        "prefix": "UiEnableInput",
        "description": "Arguments\nnone\n\nReturn value\nnone\n\nFunction Information\nEnable input that has been previously disabled\n\nExample\nUiDisableInput()\nif UiButtonText(\"Okay\") then\n\t--Will never happen\nend\n\nUiEnableInput()\nif UiButtonText(\"Okay\") then\n\t--This can happen\nend\n\nAPI 0.7.0"
    },
    "UiReceivesInput": {
        "scope": "lua",
        "body": "UiReceivesInput()",
        "prefix": "UiReceivesInput",
        "description": "Arguments\nnone\n\nReturn value\nreceives (boolean) – True if current context receives input\n\n\nFunction Information\nThis function will check current state receives input. This is the case if input is not explicitly disabled with (with UiDisableInput) and no other state is currently modal (with UiModalBegin). Input functions and UI elements already do this check internally, but it can sometimes be useful to read the input state manually to trigger things in the UI.\n\nExample\nif UiReceivesInput() then\n\thighlightItemAtMousePointer()\nend\n\nAPI 0.7.0"
    },
    "UiGetMousePos": {
        "scope": "lua",
        "body": "UiGetMousePos()",
        "prefix": "UiGetMousePos",
        "description": "Arguments\nnone\n\nReturn value\nx (number) – X coordinate\ny (number) – Y coordinate\n\n\nFunction Information\nGet mouse pointer position relative to the cursor\n\nExample\nlocal x, y = UiGetMousePos()\n\nAPI 0.7.0"
    },
    "UiIsMouseInRect": {
        "scope": "lua",
        "body": "UiIsMouseInRect(${w},${h})",
        "prefix": "UiIsMouseInRect",
        "description": "Arguments\nw (number) – Width\nh (number) – Height\n\n\nReturn value\ninside (boolean) – True if mouse pointer is within rectangle\n\n\nFunction Information\nCheck if mouse pointer is within rectangle. Note that this function respects alignment.\n\nExample\nif UiIsMouseInRect(100, 100) then\n\t-- mouse pointer is in rectangle\nend\n\nAPI 0.7.0"
    },
    "UiWorldToPixel": {
        "scope": "lua",
        "body": "UiWorldToPixel((${point}))",
        "prefix": "UiWorldToPixel",
        "description": "Arguments\npoint (table) – 3D world position as vector\n\n\nReturn value\nx (number) – X coordinate\ny (number) – Y coordinate\ndistance (number) – Distance to point\n\n\nFunction Information\nConvert world space position to user interface X and Y coordinate relative to the cursor. The distance is in meters and positive if in front of camera, negative otherwise.\n\nExample\nlocal x, y, dist = UiWorldToPixel(point)\nif dist > 0 then\nUiTranslate(x, y)\nUiText(\"Label\")\nend\n\nAPI 0.7.0"
    },
    "UiPixelToWorld": {
        "scope": "lua",
        "body": "UiPixelToWorld(${x},${y})",
        "prefix": "UiPixelToWorld",
        "description": "Arguments\nx (number) – X coordinate\ny (number) – Y coordinate\n\n\nReturn value\ndirection (table) – 3D world direction as vector\n\n\nFunction Information\nConvert X and Y UI coordinate to a world direction, as seen from current camera. This can be used to raycast into the scene from the mouse pointer position.\n\nExample\nUiMakeInteractive()\nlocal x, y = UiGetMousePos()\nlocal dir = UiPixelToWorld(x, y)\nlocal pos = GetCameraTransform().pos\nlocal hit, dist = QueryRaycast(pos, dir, 100)\nif hit then\n\tDebugPrint(\"hit distance: \" .. dist)\nend\n\nAPI 0.7.0"
    },
    "UiBlur": {
        "scope": "lua",
        "body": "UiBlur(${amount},amount)",
        "prefix": "UiBlur",
        "description": "Arguments\namount (number) – Blur amount (0.0 to 1.0)\n\n\nReturn value\nnone\n\nFunction Information\nPerform a gaussian blur on current screen content\n\nExample\nUiBlur(1.0)\ndrawMenu()\n\nAPI 0.7.0"
    },
    "UiFont": {
        "scope": "lua",
        "body": "UiFont('${path}',${size},size)",
        "prefix": "UiFont",
        "description": "Arguments\npath (string) – Path to TTF font file\nsize (number) – Font size (10 to 100)\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nUiFont(\"bold.ttf\", 24)\nUiText(\"Hello\")\n\nAPI 0.7.0"
    },
    "UiFontHeight": {
        "scope": "lua",
        "body": "UiFontHeight()",
        "prefix": "UiFontHeight",
        "description": "Arguments\nnone\n\nReturn value\nsize (number) – Font size\n\n\nFunction Information\nnone\n\nExample\nlocal h = UiFontHeight()\n\nAPI 0.7.0"
    },
    "UiText": {
        "scope": "lua",
        "body": "UiText('${text}',move)",
        "prefix": "UiText",
        "description": "Arguments\ntext (string) – Print text at cursor location\nmove (boolean, optional) – Automatically move cursor vertically. Default false.\n\n\nReturn value\nw (number) – Width of text\nh (number) – Height of text\n\n\nFunction Information\nnone\n\nExample\nUiFont(\"bold.ttf\", 24)\nUiText(\"Hello\")\n\n...\n\n--Automatically advance cursor\nUiText(\"First line\", true)\nUiText(\"Second line\", true)\n\nAPI 0.7.0"
    },
    "UiGetTextSize": {
        "scope": "lua",
        "body": "UiGetTextSize('${text}')",
        "prefix": "UiGetTextSize",
        "description": "Arguments\ntext (string) – A text string\n\n\nReturn value\nw (number) – Width of text\nh (number) – Height of text\n\n\nFunction Information\nnone\n\nExample\nlocal w, h = GetTextSize(\"Some text\")\n\nAPI 0.7.0"
    },
    "UiWordWrap": {
        "scope": "lua",
        "body": "UiWordWrap(${width})",
        "prefix": "UiWordWrap",
        "description": "Arguments\nwidth (number) – Maximum width of text\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\nUiWordWrap(200)\nUiText(\"Some really long text that will get wrapped into several lines\")\n\nAPI 0.7.0"
    },
    "UiTextOutline": {
        "scope": "lua",
        "body": "UiTextOutline(${r},${g},${b},${a},thickness)",
        "prefix": "UiTextOutline",
        "description": "Arguments\nr (number) – Red channel\ng (number) – Green channel\nb (number) – Blue channel\na (number) – Alpha channel\nthickness (number, optional) – Outline thickness. Default is 0.1\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\n--Black outline, standard thickness\nUiTextOutline(0,0,0,1)\nUiText(\"Text with outline\")\n\nAPI 0.7.0"
    },
    "UiTextShadow": {
        "scope": "lua",
        "body": "UiTextShadow(${r},${g},${b},${a},distance,blur)",
        "prefix": "UiTextShadow",
        "description": "Arguments\nr (number) – Red channel\ng (number) – Green channel\nb (number) – Blue channel\na (number) – Alpha channel\ndistance (number, optional) – Shadow distance. Default is 1.0\nblur (number, optional) – Shadow blur. Default is 0.5\n\n\nReturn value\nnone\n\nFunction Information\nnone\n\nExample\n--Black drop shadow, 50% transparent, distance 2\nUiTextShadow(0, 0, 0, 0.5, 2.0)\nUiText(\"Text with drop shadow\")\n\nAPI 0.7.0"
    },
    "UiRect": {
        "scope": "lua",
        "body": "UiRect(${w},${h})",
        "prefix": "UiRect",
        "description": "Arguments\nw (number) – Width\nh (number) – Height\n\n\nReturn value\nnone\n\nFunction Information\nDraw solid rectangle at cursor position\n\nExample\n--Draw full-screen black rectangle\nUiColor(0, 0, 0)\nUiRect(UiWidth(), UiHeight())\n\n--Draw smaller, red, rotating rectangle in center of screen\nUiPush()\n\tUiColor(1, 0, 0)\n\tUiTranslate(UiCenter(), UiMiddle())\n\tUiRotate(GetTime())\n\tUiAlign(\"center middle\")\n\tUiRect(100, 100)\nUiPop()\n\nAPI 0.7.0"
    },
    "UiImage": {
        "scope": "lua",
        "body": "UiImage('${path}',image)",
        "prefix": "UiImage",
        "description": "Arguments\npath (string) – Path to image (PNG or JPG format)\n\n\nReturn value\nw (number) – Image width\nh (number) – Image height\n\n\nFunction Information\nDraw image at cursor position\n\nExample\n--Draw image in center of screen\nUiPush()\n\tUiTranslate(UiCenter(), UiMiddle())\n\tUiAlign(\"center middle\")\n\tUiImage(\"test.png\")\nUiPop()\n\nAPI 0.7.0"
    },
    "UiGetImageSize": {
        "scope": "lua",
        "body": "UiGetImageSize('${path}',image)",
        "prefix": "UiGetImageSize",
        "description": "Arguments\npath (string) – Path to image (PNG or JPG format)\n\n\nReturn value\nw (number) – Image width\nh (number) – Image height\n\n\nFunction Information\nGet image size\n\nExample\nlocal w,h = UiGetImageSize(\"test.png\")\n\nAPI 0.7.0"
    },
    "UiImageBox": {
        "scope": "lua",
        "body": "UiImageBox('${path}',image,${width},${height},${borderWidth},${borderHeight})",
        "prefix": "UiImageBox",
        "description": "Arguments\npath (string) – Path to image (PNG or JPG format)\nwidth (number) – Width\nheight (number) – Height\nborderWidth (number) – Border width\nborderHeight (number) – Border height\n\n\nReturn value\nnone\n\nFunction Information\nDraw 9-slice image at cursor position. Width should be at least 2*borderWidth. Height should be at least 2*borderHeight.\n\nExample\nUiImageBox(\"menu-frame.png\", 200, 200, 10, 10)\n\nAPI 0.7.0"
    },
    "UiSound": {
        "scope": "lua",
        "body": "UiSound('${path}',file,volume,pitch,pan,panning)",
        "prefix": "UiSound",
        "description": "Arguments\npath (string) – Path to sound file (OGG format)\nvolume (number, optional) – Playback volume. Default 1.0\npitch (number, optional) – Playback pitch. Default 1.0\npan (number, optional) – Playback stereo panning (-1.0 to 1.0). Default 0.0.\n\n\nReturn value\nnone\n\nFunction Information\nUI sounds are not affected by acoustics simulation. Use LoadSound / PlaySound for that.\n\nExample\nUiSound(\"click.ogg\")\n\nAPI 0.7.0"
    },
    "UiSoundLoop": {
        "scope": "lua",
        "body": "UiSoundLoop('${path}',file,volume)",
        "prefix": "UiSoundLoop",
        "description": "Arguments\npath (string) – Path to looping sound file (OGG format)\nvolume (number, optional) – Playback volume. Default 1.0\n\n\nReturn value\nnone\n\nFunction Information\nCall this continuously to keep playing loop. UI sounds are not affected by acoustics simulation. Use LoadLoop / PlayLoop for that.\n\nExample\nif animating then\n\tUiSoundLoop(\"screech.ogg\")\nend\n\nAPI 0.7.0"
    },
    "UiMute": {
        "scope": "lua",
        "body": "UiMute(${amount},amount,music)",
        "prefix": "UiMute",
        "description": "Arguments\namount (number) – Mute by this amount (0.0 to 1.0)\nmusic (boolean, optional) – Mute music as well\n\n\nReturn value\nnone\n\nFunction Information\nMute game audio and optionally music for the next frame. Call continuously to stay muted.\n\nExample\nif menuOpen then\n\tUiMute(1.0)\nend\n\nAPI 0.7.0"
    },
    "UiButtonImageBox": {
        "scope": "lua",
        "body": "UiButtonImageBox('${path}',image,${borderWidth},${borderHeight},r,g,b,a)",
        "prefix": "UiButtonImageBox",
        "description": "Arguments\npath (string) – Path to image (PNG or JPG format)\nborderWidth (number) – Border width\nborderHeight (number) – Border height\nr (number, optional) – Red multiply. Default 1.0\ng (number, optional) – Green multiply. Default 1.0\nb (number, optional) – Blue multiply. Default 1.0\na (number, optional) – Alpha channel. Default 1.0\n\n\nReturn value\nnone\n\nFunction Information\nSet up 9-slice image to be used as background for buttons.\n\nExample\nUiButtonImageBox(\"button-9slice.png\", 10, 10)\nif UiTextButton(\"Test\") then\n\t...\nend\n\nAPI 0.7.0"
    },
    "UiButtonHoverColor": {
        "scope": "lua",
        "body": "UiButtonHoverColor(${r},${g},${b},a)",
        "prefix": "UiButtonHoverColor",
        "description": "Arguments\nr (number) – Red multiply\ng (number) – Green multiply\nb (number) – Blue multiply\na (number, optional) – Alpha channel. Default 1.0\n\n\nReturn value\nnone\n\nFunction Information\nButton color filter when hovering mouse pointer.\n\nExample\nUiButtonHoverColor(1, 0, 0)\nif UiTextButton(\"Test\") then\n\t...\nend\n\nAPI 0.7.0"
    },
    "UiButtonPressColor": {
        "scope": "lua",
        "body": "UiButtonPressColor(${r},${g},${b},a)",
        "prefix": "UiButtonPressColor",
        "description": "Arguments\nr (number) – Red multiply\ng (number) – Green multiply\nb (number) – Blue multiply\na (number, optional) – Alpha channel. Default 1.0\n\n\nReturn value\nnone\n\nFunction Information\nButton color filter when pressing down.\n\nExample\nUiButtonPressColor(0, 1, 0)\nif UiTextButton(\"Test\") then\n\t...\nend\n\nAPI 0.7.0"
    },
    "UiButtonPressDist": {
        "scope": "lua",
        "body": "UiButtonPressDist(${dist})",
        "prefix": "UiButtonPressDist",
        "description": "Arguments\ndist (number) – Press distance\n\n\nReturn value\nnone\n\nFunction Information\nThe button offset when being pressed\n\nExample\nUiButtonPressDistance(4)\nif UiTextButton(\"Test\") then\n\t...\nend\n\nAPI 0.7.0"
    },
    "UiTextButton": {
        "scope": "lua",
        "body": "UiTextButton('${text}',w,h)",
        "prefix": "UiTextButton",
        "description": "Arguments\ntext (string) – Text on button\nw (number, optional) – Button width\nh (number, optional) – Button height\n\n\nReturn value\npressed (boolean) – True if user clicked button\n\n\nFunction Information\nnone\n\nExample\nif UiTextButton(\"Test\") then\n\t...\nend\n\nAPI 0.7.0"
    },
    "UiImageButton": {
        "scope": "lua",
        "body": "UiImageButton(${path},path,w,h)",
        "prefix": "UiImageButton",
        "description": "Arguments\npath (number) – Image path (PNG or JPG file)\nw (number, optional) – Button width\nh (number, optional) – Button height\n\n\nReturn value\npressed (boolean) – True if user clicked button\n\n\nFunction Information\nnone\n\nExample\nif UiImageButton(\"image.png\") then\n\t...\nend\n\nAPI 0.7.0"
    },
    "UiBlankButton": {
        "scope": "lua",
        "body": "UiBlankButton(${w},${h})",
        "prefix": "UiBlankButton",
        "description": "Arguments\nw (number) – Button width\nh (number) – Button height\n\n\nReturn value\npressed (boolean) – True if user clicked button\n\n\nFunction Information\nnone\n\nExample\nif UiBlankButton(30, 30) then\n\t...\nend\n\nAPI 0.7.0"
    },
    "UiSlider": {
        "scope": "lua",
        "body": "UiSlider(${path},path,'${axis}',${current},${min},${max})",
        "prefix": "UiSlider",
        "description": "Arguments\npath (number) – Image path (PNG or JPG file)\naxis (string) – Drag axis, must be \"x\" or \"y\"\ncurrent (number) – Current value\nmin (number) – Minimum value\nmax (number) – Maximum value\n\n\nReturn value\nvalue (number) – New value, same as current if not changed\ndone (boolean) – True if user is finished changing (released slider)\n\n\nFunction Information\nnone\n\nExample\nvalue = UiSlider(\"dot.png\", \"x\", value, 0, 100)\n\nAPI 0.7.0"
    },
    "UiGetScreen": {
        "scope": "lua",
        "body": "UiGetScreen()",
        "prefix": "UiGetScreen",
        "description": "Arguments\nnone\n\nReturn value\nhandle (number) – Handle to the screen running this script or zero if none.\n\n\nFunction Information\nnone\n\nExample\n--Turn off screen running current script\nscreen = UiGetScreen()\nSetScreenEnabled(screen, false)\n\nAPI 0.7.0"
    }
}